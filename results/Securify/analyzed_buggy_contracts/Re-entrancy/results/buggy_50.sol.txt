Processing contract: buggy_50.sol:digitalNotary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'digitalNotary':
    |        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent17[msg.sender] -= _weiToWithdraw;
  at buggy_50.sol(24)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_50.sol(44)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_50.sol(59)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(89)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(136)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_50.sol(262)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(330)

[31mViolation[0m for DAO in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(358)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_50.sol(13)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_50.sol(33)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_50.sol(72)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_50.sol(81)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_50.sol(115)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function bug_re_ent20() public{
    |        require(not_called_re_ent20);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(152)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_50.sol(167)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_50.sol(181)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_50.sol(194)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function callme_re_ent7() public{
    |        require(counter_re_ent7<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(205)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_50.sol(218)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function callme_re_ent14() public{
    |        require(counter_re_ent14<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(232)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_50.sol(246)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_50.sol(276)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_50.sol(286)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function callme_re_ent35() public{
    |        require(counter_re_ent35<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(302)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function bug_re_ent27() public{
    |        require(not_called_re_ent27);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(372)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_50.sol(13)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_50.sol(33)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_50.sol(59)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_50.sol(218)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_50.sol(246)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |        require(cb > 0);
    |        
  > |        manager.transfer(cb);
    |    }
    |mapping(address => uint) balances_re_ent8;
  at buggy_50.sol(258)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_50.sol(72)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_50.sol(115)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(136)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_50.sol(167)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_50.sol(194)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_50.sol(262)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_50.sol(276)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_50.sol(286)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(330)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(358)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_50.sol(13)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_50.sol(33)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_50.sol(59)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_50.sol(218)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_50.sol(246)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |        require(cb > 0);
    |        
  > |        manager.transfer(cb);
    |    }
    |mapping(address => uint) balances_re_ent8;
  at buggy_50.sol(258)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent17[msg.sender] -= _weiToWithdraw;
  at buggy_50.sol(24)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_50.sol(44)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_50.sol(81)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(89)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function bug_re_ent20() public{
    |        require(not_called_re_ent20);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(152)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_50.sol(181)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function bug_re_ent27() public{
    |        require(not_called_re_ent27);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(372)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_50.sol(13)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_50.sol(33)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_50.sol(59)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_50.sol(72)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_50.sol(115)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(136)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_50.sol(167)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_50.sol(194)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function callme_re_ent7() public{
    |        require(counter_re_ent7<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(205)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_50.sol(218)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function callme_re_ent14() public{
    |        require(counter_re_ent14<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(232)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_50.sol(246)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_50.sol(262)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_50.sol(276)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_50.sol(286)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function callme_re_ent35() public{
    |        require(counter_re_ent35<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_50.sol(302)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(330)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_50.sol(358)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
  > |      lastPlayer_re_ent2 = msg.sender;
    |      jackpot_re_ent2    = address(this).balance;
    |    }
  at buggy_50.sol(15)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  > |      jackpot_re_ent2    = address(this).balance;
    |    }
    |  address payable private manager;
  at buggy_50.sol(16)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
  > |      lastPlayer_re_ent37 = msg.sender;
    |      jackpot_re_ent37    = address(this).balance;
    |    }
  at buggy_50.sol(35)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  > |      jackpot_re_ent37    = address(this).balance;
    |    }
    |  uint private hashfee;
  at buggy_50.sol(36)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |	    if (!success)
    |	        revert();
  > |      lastPlayer_re_ent9 = msg.sender;
    |      jackpot_re_ent9    = address(this).balance;
    |    }
  at buggy_50.sol(62)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |	        revert();
    |      lastPlayer_re_ent9 = msg.sender;
  > |      jackpot_re_ent9    = address(this).balance;
    |    }
    |  mapping(bytes32 => HashRegistration[]) HashList;
  at buggy_50.sol(63)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |            revert();
    |        }
  > |        not_called_re_ent13 = false;
    |    }
    |  event  ChangeHashOwnershipEvent(address indexed msgsender, address indexed newowner, bytes32 indexed hash, uint timestamp);
  at buggy_50.sol(93)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |            revert();
    |        }
  > |        not_called_re_ent20 = false;
    |    }
    |    
  at buggy_50.sol(155)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |            revert();
    |        }
  > |        counter_re_ent7 += 1;
    |    }
    |    
  at buggy_50.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
  > |      lastPlayer_re_ent23 = msg.sender;
    |      jackpot_re_ent23    = address(this).balance;
    |    }
  at buggy_50.sol(220)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  > |      jackpot_re_ent23    = address(this).balance;
    |    }
    |    
  at buggy_50.sol(221)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |            revert();
    |        }
  > |        counter_re_ent14 += 1;
    |    }
    |    
  at buggy_50.sol(235)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
  > |      lastPlayer_re_ent30 = msg.sender;
    |      jackpot_re_ent30    = address(this).balance;
    |    }
  at buggy_50.sol(248)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  > |      jackpot_re_ent30    = address(this).balance;
    |    }
    |    
  at buggy_50.sol(249)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |            revert();
    |        }
  > |        counter_re_ent35 += 1;
    |    }
    |    
  at buggy_50.sol(305)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |            revert();
    |        }
  > |        not_called_re_ent27 = false;
    |    }
    |}
  at buggy_50.sol(375)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |/**
  > | *Submitted for verification at Etherscan.io on 2019-09-23
    |*/
    |
  at buggy_50.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(newfee >= 0);
    |        
  > |        hashfee = newfee;
    |    }
    |bool not_called_re_ent20 = true;
  at buggy_50.sol(147)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(newfee >= 0);
    |        
  > |        changehashownerfee = newfee;
    |    }
    |mapping(address => uint) balances_re_ent38;
  at buggy_50.sol(175)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |    function setcontractactive(bool contactive) external onlyManager
    |    {
  > |        contractactive = contactive;
    |    }
    |uint256 counter_re_ent7 =0;
  at buggy_50.sol(200)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |    {
    |        require(newmngr.balance > 0);
  > |        manager = newmngr;
    |    }
    |uint256 counter_re_ent14 =0;
  at buggy_50.sol(227)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        thisregistration.registrationtime = now;
    |        
  > |        HashList[hash].push(thisregistration);
    |        
    |        HashListLength++;
  at buggy_50.sol(319)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        HashList[hash].push(thisregistration);
    |        
  > |        HashListLength++;
    |        
    |        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);
  at buggy_50.sol(321)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        thisregistration.registrationtime = now;
    |        
  > |        HashList[hash].push(thisregistration);
    |        
    |        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);
  at buggy_50.sol(350)


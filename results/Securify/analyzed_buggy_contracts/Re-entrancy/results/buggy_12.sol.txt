Processing contract: buggy_12.sol:ERC20
Processing contract: buggy_12.sol:ERC223
Processing contract: buggy_12.sol:ERC223ReceivingContract
Processing contract: buggy_12.sol:ERC223Token
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_12.sol:Grand
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_12.sol:Owned
Processing contract: buggy_12.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'ERC223Token':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_12.sol(197)

[31mViolation[0m for DAO in contract 'ERC223Token':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[31mViolation[0m for DAO in contract 'ERC223Token':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(214)

[31mViolation[0m for DAO in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(316)

[31mViolation[0m for DAOConstantGas in contract 'ERC223Token':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[31mViolation[0m for DAOConstantGas in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(232)

[31mViolation[0m for DAOConstantGas in contract 'ERC223Token':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_12.sol(269)

[31mViolation[0m for DAOConstantGas in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(303)

[31mViolation[0m for TODAmount in contract 'ERC223Token':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[31mViolation[0m for TODAmount in contract 'ERC223Token':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[33mWarning[0m for TODAmount in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(232)

[33mWarning[0m for TODAmount in contract 'ERC223Token':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_12.sol(269)

[33mWarning[0m for TODAmount in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(303)

[33mWarning[0m for TODAmount in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(316)

[31mViolation[0m for TODReceiver in contract 'ERC223Token':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[31mViolation[0m for TODReceiver in contract 'ERC223Token':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_12.sol(197)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(214)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(232)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_12.sol(269)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(303)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ERC223Token':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(316)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC223Token':
    |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
  > |      lastPlayer_re_ent37 = msg.sender;
    |      jackpot_re_ent37    = address(this).balance;
    |    }
  at buggy_12.sol(189)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC223Token':
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  > |      jackpot_re_ent37    = address(this).balance;
    |    }
    |    function transfer(address to, uint value) public returns (bool);
  at buggy_12.sol(190)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC223Token':
    |	    if (!success)
    |	        revert();
  > |      lastPlayer_re_ent9 = msg.sender;
    |      jackpot_re_ent9    = address(this).balance;
    |    }
  at buggy_12.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC223Token':
    |	        revert();
    |      lastPlayer_re_ent9 = msg.sender;
  > |      jackpot_re_ent9    = address(this).balance;
    |    }
    |  bool not_called_re_ent13 = true;
  at buggy_12.sol(209)

[31mViolation[0m for UnrestrictedWrite in contract 'ERC223Token':
    |            revert();
    |        }
  > |        not_called_re_ent13 = false;
    |    }
    |  event Transfer(address indexed from, address indexed to, uint value); //ERC 20 style
  at buggy_12.sol(218)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC223Token':
    |        require(msg.sender != _to);
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        if (codeLength > 0) {
  at buggy_12.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'ERC223Token':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        if (codeLength > 0) {
  at buggy_12.sol(288)

[31mViolation[0m for DAO in contract 'Grand':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_12.sol(197)

[31mViolation[0m for DAO in contract 'Grand':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[31mViolation[0m for DAO in contract 'Grand':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(214)

[31mViolation[0m for DAO in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(316)

[31mViolation[0m for DAO in contract 'Grand':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_12.sol(400)

[31mViolation[0m for DAO in contract 'Grand':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_12.sol(500)

[31mViolation[0m for DAO in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(554)

[31mViolation[0m for DAO in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(571)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(232)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_12.sol(269)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(303)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |  mapping(address => uint) balances_re_ent15;
    |    function withdraw_balances_re_ent15 () public {
  > |       if (msg.sender.send(balances_re_ent15[msg.sender ]))
    |          balances_re_ent15[msg.sender] = 0;
    |      }
  at buggy_12.sol(331)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function bug_re_ent20() public{
    |        require(not_called_re_ent20);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(344)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function callme_re_ent28() public{
    |        require(counter_re_ent28<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(361)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function bug_re_ent34() public{
    |        require(not_called_re_ent34);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(370)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function callme_re_ent21() public{
    |        require(counter_re_ent21<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(379)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_12.sol(393)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_12.sol(416)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_12.sol(429)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_12.sol(442)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function callme_re_ent7() public{
    |        require(counter_re_ent7<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(452)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_12.sol(464)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function callme_re_ent14() public{
    |        require(counter_re_ent14<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(477)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_12.sol(489)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_12.sol(512)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_12.sol(522)

[31mViolation[0m for DAOConstantGas in contract 'Grand':
    |function callme_re_ent35() public{
    |        require(counter_re_ent35<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(541)

[31mViolation[0m for TODAmount in contract 'Grand':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[31mViolation[0m for TODAmount in contract 'Grand':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[31mViolation[0m for TODAmount in contract 'Grand':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_12.sol(464)

[31mViolation[0m for TODAmount in contract 'Grand':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_12.sol(489)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(232)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_12.sol(269)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(303)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(316)

[33mWarning[0m for TODAmount in contract 'Grand':
    |  mapping(address => uint) balances_re_ent15;
    |    function withdraw_balances_re_ent15 () public {
  > |       if (msg.sender.send(balances_re_ent15[msg.sender ]))
    |          balances_re_ent15[msg.sender] = 0;
    |      }
  at buggy_12.sol(331)

[33mWarning[0m for TODAmount in contract 'Grand':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_12.sol(400)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_12.sol(416)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_12.sol(442)

[33mWarning[0m for TODAmount in contract 'Grand':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_12.sol(500)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_12.sol(512)

[33mWarning[0m for TODAmount in contract 'Grand':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_12.sol(522)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(554)

[33mWarning[0m for TODAmount in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(571)

[31mViolation[0m for TODReceiver in contract 'Grand':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[31mViolation[0m for TODReceiver in contract 'Grand':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[31mViolation[0m for TODReceiver in contract 'Grand':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_12.sol(464)

[31mViolation[0m for TODReceiver in contract 'Grand':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_12.sol(489)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_12.sol(197)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(214)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function bug_re_ent20() public{
    |        require(not_called_re_ent20);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(344)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function bug_re_ent34() public{
    |        require(not_called_re_ent34);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(370)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(balances_re_ent10[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent10[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_12.sol(393)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_12.sol(429)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_12.sol(187)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |      uint jackpot_re_ent9;
    |	  function buyTicket_re_ent9() public{
  > |	    (bool success,) = lastPlayer_re_ent9.call.value(jackpot_re_ent9)("");
    |	    if (!success)
    |	        revert();
  at buggy_12.sol(205)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent5[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(232)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(redeemableEther_re_ent25[msg.sender] > 0);
    |        uint transferValue_re_ent25 = redeemableEther_re_ent25[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent25);   //bug
    |        redeemableEther_re_ent25[msg.sender] = 0;
    |    }
  at buggy_12.sol(269)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_12.sol(303)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(316)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |  mapping(address => uint) balances_re_ent15;
    |    function withdraw_balances_re_ent15 () public {
  > |       if (msg.sender.send(balances_re_ent15[msg.sender ]))
    |          balances_re_ent15[msg.sender] = 0;
    |      }
  at buggy_12.sol(331)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function callme_re_ent28() public{
    |        require(counter_re_ent28<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(361)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function callme_re_ent21() public{
    |        require(counter_re_ent21<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(379)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_12.sol(400)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_12.sol(416)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_12.sol(442)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function callme_re_ent7() public{
    |        require(counter_re_ent7<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(452)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_12.sol(464)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function callme_re_ent14() public{
    |        require(counter_re_ent14<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(477)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_12.sol(489)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_12.sol(500)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_12.sol(512)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_12.sol(522)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |function callme_re_ent35() public{
    |        require(counter_re_ent35<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_12.sol(541)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(554)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_12.sol(571)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Grand':
    |    // extract ether sent to the contract
    |    function getETH(uint256 _amount) public onlyOwner {
  > |        msg.sender.transfer(_amount);
    |    }
    |mapping(address => uint) balances_re_ent36;
  at buggy_12.sol(518)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
  > |      lastPlayer_re_ent37 = msg.sender;
    |      jackpot_re_ent37    = address(this).balance;
    |    }
  at buggy_12.sol(189)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  > |      jackpot_re_ent37    = address(this).balance;
    |    }
    |    function transfer(address to, uint value) public returns (bool);
  at buggy_12.sol(190)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |	    if (!success)
    |	        revert();
  > |      lastPlayer_re_ent9 = msg.sender;
    |      jackpot_re_ent9    = address(this).balance;
    |    }
  at buggy_12.sol(208)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |	        revert();
    |      lastPlayer_re_ent9 = msg.sender;
  > |      jackpot_re_ent9    = address(this).balance;
    |    }
    |  bool not_called_re_ent13 = true;
  at buggy_12.sol(209)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        not_called_re_ent13 = false;
    |    }
    |  event Transfer(address indexed from, address indexed to, uint value); //ERC 20 style
  at buggy_12.sol(218)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        not_called_re_ent20 = false;
    |    }
    |
  at buggy_12.sol(347)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        counter_re_ent28 += 1;
    |    }
    |  string public constant name = "Grand Coin";
  at buggy_12.sol(364)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        not_called_re_ent34 = false;
    |    }
    |  string public constant symbol = "GRAND";
  at buggy_12.sol(373)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        counter_re_ent21 += 1;
    |    }
    |  uint8 public constant decimals = 18;
  at buggy_12.sol(382)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        counter_re_ent7 += 1;
    |    }
    |
  at buggy_12.sol(455)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
  > |      lastPlayer_re_ent23 = msg.sender;
    |      jackpot_re_ent23    = address(this).balance;
    |    }
  at buggy_12.sol(466)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  > |      jackpot_re_ent23    = address(this).balance;
    |    }
    |
  at buggy_12.sol(467)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        counter_re_ent14 += 1;
    |    }
    |
  at buggy_12.sol(480)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
  > |      lastPlayer_re_ent30 = msg.sender;
    |      jackpot_re_ent30    = address(this).balance;
    |    }
  at buggy_12.sol(491)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  > |      jackpot_re_ent30    = address(this).balance;
    |    }
    |
  at buggy_12.sol(492)

[31mViolation[0m for UnrestrictedWrite in contract 'Grand':
    |            revert();
    |        }
  > |        counter_re_ent35 += 1;
    |    }
    |
  at buggy_12.sol(544)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |        require(msg.sender != _to);
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        if (codeLength > 0) {
  at buggy_12.sol(253)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |
    |        balances[msg.sender] = balances[msg.sender].sub(_value);
  > |        balances[_to] = balances[_to].add(_value);
    |
    |        if (codeLength > 0) {
  at buggy_12.sol(288)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |    function changeOwner(address _new) public onlyOwner {
    |    	require(_new != address(0));
  > |        owner = _new;
    |    }
    |mapping(address => uint) balances_re_ent38;
  at buggy_12.sol(423)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |    // pause all the g on the contract
    |    function pauseContract() public onlyOwner {
  > |        pause = true;
    |    }
    |mapping(address => uint) redeemableEther_re_ent4;
  at buggy_12.sol(435)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |
    |    function resumeContract() public onlyOwner {
  > |        pause = false;
    |    }
    |uint256 counter_re_ent7 =0;
  at buggy_12.sol(447)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |    // lock one's wallet
    |    function lock(address _addr) public onlyOwner {
  > |        lockAddresses[_addr] = true;
    |    }
    |uint256 counter_re_ent14 =0;
  at buggy_12.sol(472)

[33mWarning[0m for UnrestrictedWrite in contract 'Grand':
    |
    |    function unlock(address _addr) public onlyOwner {
  > |        lockAddresses[_addr] = false;
    |    }
    |address payable lastPlayer_re_ent30;
  at buggy_12.sol(484)


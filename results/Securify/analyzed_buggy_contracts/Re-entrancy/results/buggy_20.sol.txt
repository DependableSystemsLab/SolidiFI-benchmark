Processing contract: buggy_20.sol:Ownable
Processing contract: buggy_20.sol:RampInstantEscrowsPoolInterface
Processing contract: buggy_20.sol:RampInstantEthPool
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_20.sol:RampInstantPool
Processing contract: buggy_20.sol:RampInstantPoolInterface
Processing contract: buggy_20.sol:Stoppable
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_20.sol(34)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(44)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent17[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(59)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(105)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(127)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |  mapping(address => uint) balances_re_ent1;
    |    function withdraw_balances_re_ent1 () public {
  > |       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("");
    |       if (success)
    |          balances_re_ent1[msg.sender] = 0;
  at buggy_20.sol(223)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(272)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(312)

[31mViolation[0m for DAO in contract 'RampInstantEthPool':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_20.sol(508)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(94)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent11[msg.sender] > 0);
    |        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent11);   //bug
    |        redeemableEther_re_ent11[msg.sender] = 0;
    |    }
  at buggy_20.sol(217)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function bug_re_ent41() public{
    |        require(not_called_re_ent41);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(231)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function callme_re_ent42() public{
    |        require(counter_re_ent42<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(240)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function bug_re_ent27() public{
    |        require(not_called_re_ent27);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(255)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_20.sol(265)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(301)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function bug_re_ent20() public{
    |        require(not_called_re_ent20);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(324)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_20.sol(338)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_20.sol(354)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_20.sol(370)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function callme_re_ent7() public{
    |        require(counter_re_ent7<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(394)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_20.sol(417)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function callme_re_ent14() public{
    |        require(counter_re_ent14<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(433)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_20.sol(476)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_20.sol(497)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_20.sol(525)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_20.sol(537)

[31mViolation[0m for DAOConstantGas in contract 'RampInstantEthPool':
    |function callme_re_ent35() public{
    |        require(counter_re_ent35<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(553)

[31mViolation[0m for TODAmount in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[31mViolation[0m for TODAmount in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_20.sol(417)

[31mViolation[0m for TODAmount in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_20.sol(476)

[31mViolation[0m for TODAmount in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_20.sol(497)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_20.sol(34)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(44)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(94)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(105)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent11[msg.sender] > 0);
    |        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent11);   //bug
    |        redeemableEther_re_ent11[msg.sender] = 0;
    |    }
  at buggy_20.sol(217)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |  mapping(address => uint) balances_re_ent1;
    |    function withdraw_balances_re_ent1 () public {
  > |       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("");
    |       if (success)
    |          balances_re_ent1[msg.sender] = 0;
  at buggy_20.sol(223)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(301)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(312)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_20.sol(338)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_20.sol(370)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_20.sol(508)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_20.sol(525)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_20.sol(537)

[33mWarning[0m for TODAmount in contract 'RampInstantEthPool':
    |        uint256 _amount
    |    ) public onlyOwner returns (bool success) {
  > |        _to.transfer(_amount);  // always throws on failure
    |        return true;
    |    }
  at buggy_20.sol(517)

[31mViolation[0m for TODReceiver in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[31mViolation[0m for TODReceiver in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_20.sol(417)

[31mViolation[0m for TODReceiver in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_20.sol(476)

[31mViolation[0m for TODReceiver in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_20.sol(497)

[31mViolation[0m for TODReceiver in contract 'RampInstantEthPool':
    |        uint256 _amount
    |    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {
  > |        swapsContract.transfer(_amount);  // always throws on failure
    |        return true;
    |    }
  at buggy_20.sol(532)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent17[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(59)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(127)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function bug_re_ent41() public{
    |        require(not_called_re_ent41);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(231)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function bug_re_ent27() public{
    |        require(not_called_re_ent27);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(255)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(balances_re_ent31[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent31[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_20.sol(265)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function bug_re_ent13() public{
    |        require(not_called_re_ent13);
  > |        (bool success,)=msg.sender.call.value(1 ether)("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(272)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function bug_re_ent20() public{
    |        require(not_called_re_ent20);
  > |        if( ! (msg.sender.send(1 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(324)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(balances_re_ent38[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        require(msg.sender.send(_weiToWithdraw));  //bug
    |        balances_re_ent38[msg.sender] -= _weiToWithdraw;
    |    }
  at buggy_20.sol(354)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_20.sol(34)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(44)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(94)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(105)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent11[msg.sender] > 0);
    |        uint transferValue_re_ent11 = redeemableEther_re_ent11[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent11);   //bug
    |        redeemableEther_re_ent11[msg.sender] = 0;
    |    }
  at buggy_20.sol(217)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |  mapping(address => uint) balances_re_ent1;
    |    function withdraw_balances_re_ent1 () public {
  > |       (bool success,) =msg.sender.call.value(balances_re_ent1[msg.sender ])("");
    |       if (success)
    |          balances_re_ent1[msg.sender] = 0;
  at buggy_20.sol(223)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function callme_re_ent42() public{
    |        require(counter_re_ent42<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(240)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent19[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(301)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent26[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(312)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent32[msg.sender] > 0);
    |        uint transferValue_re_ent32 = redeemableEther_re_ent32[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent32);   //bug
    |        redeemableEther_re_ent32[msg.sender] = 0;
    |    }
  at buggy_20.sol(338)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent4[msg.sender] > 0);
    |        uint transferValue_re_ent4 = redeemableEther_re_ent4[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent4);   //bug
    |        redeemableEther_re_ent4[msg.sender] = 0;
    |    }
  at buggy_20.sol(370)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function callme_re_ent7() public{
    |        require(counter_re_ent7<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(394)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent23;
    |	  function buyTicket_re_ent23() public{
  > |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  at buggy_20.sol(417)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function callme_re_ent14() public{
    |        require(counter_re_ent14<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(433)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent2;
    |	  function buyTicket_re_ent2() public{
  > |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  at buggy_20.sol(476)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |      uint jackpot_re_ent30;
    |	  function buyTicket_re_ent30() public{
  > |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  at buggy_20.sol(497)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |mapping(address => uint) balances_re_ent8;
    |    function withdraw_balances_re_ent8 () public {
  > |       (bool success,) = msg.sender.call.value(balances_re_ent8[msg.sender ])("");
    |       if (success)
    |          balances_re_ent8[msg.sender] = 0;
  at buggy_20.sol(508)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        require(redeemableEther_re_ent39[msg.sender] > 0);
    |        uint transferValue_re_ent39 = redeemableEther_re_ent39[msg.sender];
  > |        msg.sender.transfer(transferValue_re_ent39);   //bug
    |        redeemableEther_re_ent39[msg.sender] = 0;
    |    }
  at buggy_20.sol(525)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |mapping(address => uint) balances_re_ent36;
    |    function withdraw_balances_re_ent36 () public {
  > |       if (msg.sender.send(balances_re_ent36[msg.sender ]))
    |          balances_re_ent36[msg.sender] = 0;
    |      }
  at buggy_20.sol(537)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |function callme_re_ent35() public{
    |        require(counter_re_ent35<=5);
  > |	if( ! (msg.sender.send(10 ether) ) ){
    |            revert();
    |        }
  at buggy_20.sol(553)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        uint256 _amount
    |    ) public onlyOwner returns (bool success) {
  > |        _to.transfer(_amount);  // always throws on failure
    |        return true;
    |    }
  at buggy_20.sol(517)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RampInstantEthPool':
    |        uint256 _amount
    |    ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {
  > |        swapsContract.transfer(_amount);  // always throws on failure
    |        return true;
    |    }
  at buggy_20.sol(532)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
  > |      lastPlayer_re_ent37 = msg.sender;
    |      jackpot_re_ent37    = address(this).balance;
    |    }
  at buggy_20.sol(78)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  > |      jackpot_re_ent37    = address(this).balance;
    |    }
    |
  at buggy_20.sol(79)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        not_called_re_ent41 = false;
    |    }
    |  uint256 public maxSwapAmount;
  at buggy_20.sol(234)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        counter_re_ent42 += 1;
    |    }
    |  bytes32 public paymentDetailsHash;
  at buggy_20.sol(243)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        not_called_re_ent27 = false;
    |    }
    |  event ReceivedFunds(address _from, uint256 _amount);
  at buggy_20.sol(258)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        not_called_re_ent13 = false;
    |    }
    |  event SwapsContractChanged(address _oldAddress, address _newAddress);
  at buggy_20.sol(276)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        not_called_re_ent20 = false;
    |    }
    |
  at buggy_20.sol(327)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        counter_re_ent7 += 1;
    |    }
    |
  at buggy_20.sol(397)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |	    if (!(lastPlayer_re_ent23.send(jackpot_re_ent23)))
    |        revert();
  > |      lastPlayer_re_ent23 = msg.sender;
    |      jackpot_re_ent23    = address(this).balance;
    |    }
  at buggy_20.sol(419)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |        revert();
    |      lastPlayer_re_ent23 = msg.sender;
  > |      jackpot_re_ent23    = address(this).balance;
    |    }
    |
  at buggy_20.sol(420)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        counter_re_ent14 += 1;
    |    }
    |
  at buggy_20.sol(436)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |	    if (!(lastPlayer_re_ent2.send(jackpot_re_ent2)))
    |        revert();
  > |      lastPlayer_re_ent2 = msg.sender;
    |      jackpot_re_ent2    = address(this).balance;
    |    }
  at buggy_20.sol(478)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |        revert();
    |      lastPlayer_re_ent2 = msg.sender;
  > |      jackpot_re_ent2    = address(this).balance;
    |    }
    |  uint16 internal constant ETH_TYPE_ID = 1;
  at buggy_20.sol(479)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |	    if (!(lastPlayer_re_ent30.send(jackpot_re_ent30)))
    |        revert();
  > |      lastPlayer_re_ent30 = msg.sender;
    |      jackpot_re_ent30    = address(this).balance;
    |    }
  at buggy_20.sol(499)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |        revert();
    |      lastPlayer_re_ent30 = msg.sender;
  > |      jackpot_re_ent30    = address(this).balance;
    |    }
    |
  at buggy_20.sol(500)

[31mViolation[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |            revert();
    |        }
  > |        counter_re_ent35 += 1;
    |    }
    |
  at buggy_20.sol(556)

[33mWarning[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |
    |    function changeOwner(address _newOwner) external onlyOwner {
  > |        owner = _newOwner;
    |        emit OwnerChanged(msg.sender, _newOwner);
    |    }
  at buggy_20.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |    function setIsActive(bool _isActive) external onlyOwner {
    |        if (_isActive == isActive) return;
  > |        isActive = _isActive;
    |        emit IsActiveChanged(_isActive);
    |    }
  at buggy_20.sol(120)

[33mWarning[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |        uint256 _maxAmount
    |    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {
  > |        minSwapAmount = _minAmount;
    |        maxSwapAmount = _maxAmount;
    |        emit LimitsChanged(_minAmount, _maxAmount);
  at buggy_20.sol(346)

[33mWarning[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |    ) public onlyOwner validateLimits(_minAmount, _maxAmount) {
    |        minSwapAmount = _minAmount;
  > |        maxSwapAmount = _maxAmount;
    |        emit LimitsChanged(_minAmount, _maxAmount);
    |    }
  at buggy_20.sol(347)

[33mWarning[0m for UnrestrictedWrite in contract 'RampInstantEthPool':
    |    ) public onlyOwner validateSwapsContract(_swapsContract, ASSET_TYPE) {
    |        address oldSwapsContract = swapsContract;
  > |        swapsContract = _swapsContract;
    |        emit SwapsContractChanged(oldSwapsContract, _swapsContract);
    |    }
  at buggy_20.sol(362)

[31mViolation[0m for DAO in contract 'Stoppable':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_20.sol(34)

[31mViolation[0m for DAO in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(44)

[31mViolation[0m for DAO in contract 'Stoppable':
    |        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent17[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(59)

[31mViolation[0m for DAO in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(105)

[31mViolation[0m for DAO in contract 'Stoppable':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(127)

[31mViolation[0m for DAOConstantGas in contract 'Stoppable':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[31mViolation[0m for DAOConstantGas in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(94)

[31mViolation[0m for TODAmount in contract 'Stoppable':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[33mWarning[0m for TODAmount in contract 'Stoppable':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_20.sol(34)

[33mWarning[0m for TODAmount in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(44)

[33mWarning[0m for TODAmount in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(94)

[33mWarning[0m for TODAmount in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(105)

[31mViolation[0m for TODReceiver in contract 'Stoppable':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |        require(balances_re_ent17[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |        (bool success,)=msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent17[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(59)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |        require(balances_re_ent3[msg.sender] >= _weiToWithdraw);
    |        // limit the withdrawal
  > |	(bool success,)= msg.sender.call.value(_weiToWithdraw)("");
    |        require(success);  //bug
    |        balances_re_ent3[msg.sender] -= _weiToWithdraw;
  at buggy_20.sol(127)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |  mapping(address => uint) balances_re_ent21;
    |    function withdraw_balances_re_ent21 () public {
  > |       (bool success,)= msg.sender.call.value(balances_re_ent21[msg.sender ])("");
    |       if (success)
    |          balances_re_ent21[msg.sender] = 0;
  at buggy_20.sol(34)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)=msg.sender.call.value(userBalance_re_ent40[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(44)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |      uint jackpot_re_ent37;
    |	  function buyTicket_re_ent37() public{
  > |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  at buggy_20.sol(76)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        if( ! (msg.sender.send(userBalance_re_ent12[msg.sender]) ) ){
    |            revert();
    |        }
  at buggy_20.sol(94)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'Stoppable':
    |        // send userBalance[msg.sender] ethers to msg.sender
    |        // if mgs.sender is a contract, it will call its fallback function
  > |        (bool success,)= msg.sender.call.value(userBalance_re_ent33[msg.sender])("");
    |        if( ! success ){
    |            revert();
  at buggy_20.sol(105)

[31mViolation[0m for UnrestrictedWrite in contract 'Stoppable':
    |	    if (!(lastPlayer_re_ent37.send(jackpot_re_ent37)))
    |        revert();
  > |      lastPlayer_re_ent37 = msg.sender;
    |      jackpot_re_ent37    = address(this).balance;
    |    }
  at buggy_20.sol(78)

[31mViolation[0m for UnrestrictedWrite in contract 'Stoppable':
    |        revert();
    |      lastPlayer_re_ent37 = msg.sender;
  > |      jackpot_re_ent37    = address(this).balance;
    |    }
    |
  at buggy_20.sol(79)

[33mWarning[0m for UnrestrictedWrite in contract 'Stoppable':
    |
    |    function changeOwner(address _newOwner) external onlyOwner {
  > |        owner = _newOwner;
    |        emit OwnerChanged(msg.sender, _newOwner);
    |    }
  at buggy_20.sol(70)

[33mWarning[0m for UnrestrictedWrite in contract 'Stoppable':
    |    function setIsActive(bool _isActive) external onlyOwner {
    |        if (_isActive == isActive) return;
  > |        isActive = _isActive;
    |        emit IsActiveChanged(_isActive);
    |    }
  at buggy_20.sol(120)


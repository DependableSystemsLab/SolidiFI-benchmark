Processing contract: buggy_50.sol:digitalNotary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |        require(cb > 0);
    |        
  > |        manager.transfer(cb);
    |    }
    |function bug_unchk_send4() payable public{
  at buggy_50.sol(147)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |        require(cb > 0);
    |        
  > |        manager.transfer(cb);
    |    }
    |function bug_unchk_send4() payable public{
  at buggy_50.sol(147)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send28() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  address payable private manager;
    |    
  at buggy_50.sol(11)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send21() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  bool private contractactive;
    |    
  at buggy_50.sol(15)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send10() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  uint private hashfee;
    |    
  at buggy_50.sol(19)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send22() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  uint private changehashownerfee;
    |    
  at buggy_50.sol(23)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send12() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  mapping(bytes32 => HashRegistration[]) HashList;
    |    
  at buggy_50.sol(33)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send11() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  uint private HashListLength;
    |    
  at buggy_50.sol(37)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send31() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  event  RegisterHashEvent(address indexed msgsender, bytes32 indexed hash, uint timestamp);
    |    
  at buggy_50.sol(41)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk_send13() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  event  ChangeHashOwnershipEvent(address indexed msgsender, address indexed newowner, bytes32 indexed hash, uint timestamp);
    |    
  at buggy_50.sol(45)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send1() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    modifier onlyManager()
  at buggy_50.sol(63)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send2() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function sethashfee(uint newfee) external onlyManager
  at buggy_50.sol(77)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send17() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function getchangehashownerfee() external view returns(uint)
  at buggy_50.sol(86)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send3() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |     function setchangehashownerfee(uint newfee) external onlyManager
  at buggy_50.sol(93)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send9() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function getcontractactive() external view returns (bool)
  at buggy_50.sol(102)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send25() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function setcontractactive(bool contactive) external onlyManager
  at buggy_50.sol(109)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send19() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |     function getmanager() external view returns(address)
  at buggy_50.sol(116)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send26() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function setmanager(address payable newmngr) external onlyManager
  at buggy_50.sol(123)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send20() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function getcontractbalance() public view returns(uint)
  at buggy_50.sol(131)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send32() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function transfercontractbalance() external onlyManager
  at buggy_50.sol(139)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send4() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function getHashOwnersCount(bytes32 hash) public view returns(uint)
  at buggy_50.sol(150)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send7() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function getNumberofHashesRegistered() external view returns(uint)
  at buggy_50.sol(157)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send23() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |     function getHashDetails(bytes32 hash,uint indx) external view returns (address,uint)
  at buggy_50.sol(164)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send14() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function registerHash(bytes32 hash) external payable
  at buggy_50.sol(176)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send30() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function changeHashOwnership(bytes32 hash, address newowner) external payable
  at buggy_50.sol(197)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send8() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    
    |    function () external
  at buggy_50.sol(217)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk_send27() payable public{
  > |      msg.sender.transfer(1 ether);}
    |}
  at buggy_50.sol(224)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |/**
  > | *Submitted for verification at Etherscan.io on 2019-09-23
    |*/
    |
  at buggy_50.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(newfee >= 0);
    |        
  > |        hashfee = newfee;
    |    }
    |function bug_unchk_send17() payable public{
  at buggy_50.sol(83)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(newfee >= 0);
    |        
  > |        changehashownerfee = newfee;
    |    }
    |function bug_unchk_send9() payable public{
  at buggy_50.sol(99)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |    function setcontractactive(bool contactive) external onlyManager
    |    {
  > |        contractactive = contactive;
    |    }
    |function bug_unchk_send19() payable public{
  at buggy_50.sol(113)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |    {
    |        require(newmngr.balance > 0);
  > |        manager = newmngr;
    |    }
    |function bug_unchk_send20() payable public{
  at buggy_50.sol(128)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        thisregistration.registrationtime = now;
    |        
  > |        HashList[hash].push(thisregistration);
    |        
    |        HashListLength++;
  at buggy_50.sol(189)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        HashList[hash].push(thisregistration);
    |        
  > |        HashListLength++;
    |        
    |        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);
  at buggy_50.sol(191)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        thisregistration.registrationtime = now;
    |        
  > |        HashList[hash].push(thisregistration);
    |        
    |        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);
  at buggy_50.sol(212)


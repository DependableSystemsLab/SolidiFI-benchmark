Processing contract: buggy_11.sol:ApproveAndCallFallBack
Processing contract: buggy_11.sol:ERC20Interface
Processing contract: buggy_11.sol:ForTheBlockchain
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_11.sol:Owned
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_11.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    function totalSupply() public view returns (uint);
    |function bug_unchk_send10() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function balanceOf(address tokenOwner) public view returns (uint balance);
    |function bug_unchk_send22() payable public{
  at buggy_11.sol(30)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    function balanceOf(address tokenOwner) public view returns (uint balance);
    |function bug_unchk_send22() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    |function bug_unchk_send12() payable public{
  at buggy_11.sol(33)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    function allowance(address tokenOwner, address spender) public view returns (uint remaining);
    |function bug_unchk_send12() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function transfer(address to, uint tokens) public returns (bool success);
    |function bug_unchk_send11() payable public{
  at buggy_11.sol(36)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    function transfer(address to, uint tokens) public returns (bool success);
    |function bug_unchk_send11() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function approve(address spender, uint tokens) public returns (bool success);
    |function bug_unchk_send1() payable public{
  at buggy_11.sol(39)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    function approve(address spender, uint tokens) public returns (bool success);
    |function bug_unchk_send1() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    |function bug_unchk_send2() payable public{
  at buggy_11.sol(42)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success);
    |function bug_unchk_send2() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |  function bug_unchk_send27() payable public{
  at buggy_11.sol(45)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |
    |  function bug_unchk_send27() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  event Transfer(address indexed from, address indexed to, uint tokens);
    |  function bug_unchk_send31() payable public{
  at buggy_11.sol(48)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |  event Transfer(address indexed from, address indexed to, uint tokens);
    |  function bug_unchk_send31() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);
    |}
  at buggy_11.sol(51)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |contract Owned {
    |  function bug_unchk_send29() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  address public owner;
    |  function bug_unchk_send6() payable public{
  at buggy_11.sol(65)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |  address public owner;
    |  function bug_unchk_send6() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  address public newOwner;
    |
  at buggy_11.sol(68)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |
    |  function bug_unchk_send13() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  event OwnershipTransferred(address indexed _from, address indexed _to);
    |
  at buggy_11.sol(72)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send3() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |    modifier onlyOwner {
  at buggy_11.sol(79)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send9() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  at buggy_11.sol(90)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send25() payable public{
  > |      msg.sender.transfer(1 ether);}
    |}
    |
  at buggy_11.sol(98)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |
    |  function bug_unchk_send16() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  string public symbol;
    |  function bug_unchk_send24() payable public{
  at buggy_11.sol(106)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |  string public symbol;
    |  function bug_unchk_send24() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  uint public decimals;
    |  function bug_unchk_send5() payable public{
  at buggy_11.sol(109)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |  uint public decimals;
    |  function bug_unchk_send5() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  string public  name;
    |  function bug_unchk_send15() payable public{
  at buggy_11.sol(112)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |  string public  name;
    |  function bug_unchk_send15() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  uint _totalSupply;
    |
  at buggy_11.sol(115)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |
    |  function bug_unchk_send28() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  mapping(address => uint) balances;
    |  function bug_unchk_send21() payable public{
  at buggy_11.sol(120)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |  mapping(address => uint) balances;
    |  function bug_unchk_send21() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  mapping(address => mapping(address => uint)) allowed;
    |
  at buggy_11.sol(123)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send19() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(140)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send26() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(150)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send20() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(160)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send32() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(175)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send4() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(192)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send7() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(212)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send23() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(223)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send14() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(238)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send30() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |
  at buggy_11.sol(248)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ForTheBlockchain':
    |    }
    |function bug_unchk_send8() payable public{
  > |      msg.sender.transfer(1 ether);}
    |}
  at buggy_11.sol(258)

[31mViolation[0m for UnrestrictedWrite in contract 'ForTheBlockchain':
    |    function transfer(address to, uint tokens) public returns (bool success) {
    |        balances[msg.sender] = balances[msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(msg.sender, to, tokens);
    |        return true;
  at buggy_11.sol(170)

[31mViolation[0m for UnrestrictedWrite in contract 'ForTheBlockchain':
    |    // ------------------------------------------------------------------------
    |    function transferFrom(address from, address to, uint tokens) public returns (bool success) {
  > |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
    |        balances[to] = balances[to].add(tokens);
  at buggy_11.sol(205)

[31mViolation[0m for UnrestrictedWrite in contract 'ForTheBlockchain':
    |        balances[from] = balances[from].sub(tokens);
    |        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
  > |        balances[to] = balances[to].add(tokens);
    |        emit Transfer(from, to, tokens);
    |        return true;
  at buggy_11.sol(207)

[33mWarning[0m for UnrestrictedWrite in contract 'ForTheBlockchain':
    |
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |function bug_unchk_send9() payable public{
  at buggy_11.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'ForTheBlockchain':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at buggy_11.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'ForTheBlockchain':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |function bug_unchk_send25() payable public{
  at buggy_11.sol(95)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Owned':
    |contract Owned {
    |  function bug_unchk_send29() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  address public owner;
    |  function bug_unchk_send6() payable public{
  at buggy_11.sol(65)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Owned':
    |  address public owner;
    |  function bug_unchk_send6() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  address public newOwner;
    |
  at buggy_11.sol(68)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Owned':
    |
    |  function bug_unchk_send13() payable public{
  > |      msg.sender.transfer(1 ether);}
    |  event OwnershipTransferred(address indexed _from, address indexed _to);
    |
  at buggy_11.sol(72)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Owned':
    |    }
    |function bug_unchk_send3() payable public{
  > |      msg.sender.transfer(1 ether);}
    |
    |    modifier onlyOwner {
  at buggy_11.sol(79)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Owned':
    |    }
    |function bug_unchk_send9() payable public{
  > |      msg.sender.transfer(1 ether);}
    |    function acceptOwnership() public {
    |        require(msg.sender == newOwner);
  at buggy_11.sol(90)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'Owned':
    |    }
    |function bug_unchk_send25() payable public{
  > |      msg.sender.transfer(1 ether);}
    |}
    |
  at buggy_11.sol(98)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |
    |    function transferOwnership(address _newOwner) public onlyOwner {
  > |        newOwner = _newOwner;
    |    }
    |function bug_unchk_send9() payable public{
  at buggy_11.sol(87)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        require(msg.sender == newOwner);
    |        emit OwnershipTransferred(owner, newOwner);
  > |        owner = newOwner;
    |        newOwner = address(0);
    |    }
  at buggy_11.sol(94)

[33mWarning[0m for UnrestrictedWrite in contract 'Owned':
    |        emit OwnershipTransferred(owner, newOwner);
    |        owner = newOwner;
  > |        newOwner = address(0);
    |    }
    |function bug_unchk_send25() payable public{
  at buggy_11.sol(95)


Processing contract: buggy_29.sol:ERC20Interface
Processing contract: buggy_29.sol:IERC20Interface
Processing contract: buggy_29.sol:RaffleToken
Processing contract: buggy_29.sol:RaffleTokenExchange
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_29.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_29.sol(169)

[31mViolation[0m for DAOConstantGas in contract 'RaffleTokenExchange':
    |            if(listing.amountLeft == 0) { listing.active = false; }
    |            uint256 amountToPay = listing.pricePerToken * amount;
  > |            listing.seller.transfer(amountToPay);
    |            totalAmountPayed = totalAmountPayed.add(amountToPay);
    |            totalAmount = totalAmount.add(amount);
  at buggy_29.sol(329)

[31mViolation[0m for DAOConstantGas in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_29.sol(379)

[31mViolation[0m for TODAmount in contract 'RaffleTokenExchange':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  event Canceled(uint256 id);
  at buggy_29.sol(278)

[31mViolation[0m for TODAmount in contract 'RaffleTokenExchange':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    //
  at buggy_29.sol(407)

[33mWarning[0m for TODAmount in contract 'RaffleTokenExchange':
    |    //
    |  function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |  uint256 public nextPurchaseId;
  at buggy_29.sol(215)

[33mWarning[0m for TODAmount in contract 'RaffleTokenExchange':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    //
  at buggy_29.sol(343)

[33mWarning[0m for TODAmount in contract 'RaffleTokenExchange':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    //
  at buggy_29.sol(361)

[31mViolation[0m for TODReceiver in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_29.sol(169)

[31mViolation[0m for TODReceiver in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_29.sol(379)

[31mViolation[0m for TODReceiver in contract 'RaffleTokenExchange':
    |    //
    |    function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
  > |        owner.transfer(withdrawAmount);
    |    }
    |bool public payedOut_unchk33 = false;
  at buggy_29.sol(401)

[33mWarning[0m for TODReceiver in contract 'RaffleTokenExchange':
    |            if(listing.amountLeft == 0) { listing.active = false; }
    |            uint256 amountToPay = listing.pricePerToken * amount;
  > |            listing.seller.transfer(amountToPay);
    |            totalAmountPayed = totalAmountPayed.add(amountToPay);
    |            totalAmount = totalAmount.add(amount);
  at buggy_29.sol(329)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_29.sol(169)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |    //
    |  function unhandledsend_unchk38(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |  address payable public owner;
  at buggy_29.sol(177)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |  function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
    |        uint64 subpot_unchk46 = 3 ether;
  > |        winner_unchk46.send(subpot_unchk46);  //bug
    |        subpot_unchk46= 0;
    |}
  at buggy_29.sol(185)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |    //
    |  function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |  uint256 public nextPurchaseId;
  at buggy_29.sol(215)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  event Canceled(uint256 id);
  at buggy_29.sol(278)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |    }
    |function bug_unchk39(address payable addr) public
  > |      {addr.send (4 ether); }
    |
    |    //////// F U N C T I O N S
  at buggy_29.sol(310)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    //
  at buggy_29.sol(343)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    //
  at buggy_29.sol(361)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_29.sol(379)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    //
  at buggy_29.sol(407)

[31mViolation[0m for UnhandledException in contract 'RaffleTokenExchange':
    |    }
    |function bug_unchk27(address payable addr) public
  > |      {addr.send (42 ether); }
    |}
  at buggy_29.sol(417)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    //
    |  function unhandledsend_unchk38(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |  address payable public owner;
  at buggy_29.sol(177)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |  function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
    |        uint64 subpot_unchk46 = 3 ether;
  > |        winner_unchk46.send(subpot_unchk46);  //bug
    |        subpot_unchk46= 0;
    |}
  at buggy_29.sol(185)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |  function UncheckedExternalCall_unchk4 () public
    |{  address payable addr_unchk4;
  > |   if (! addr_unchk4.send (42 ether))  
    |      {// comment1;
    |      }
  at buggy_29.sol(194)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    }
    |function bug_unchk39(address payable addr) public
  > |      {addr.send (4 ether); }
    |
    |    //////// F U N C T I O N S
  at buggy_29.sol(310)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |            if(listing.amountLeft == 0) { listing.active = false; }
    |            uint256 amountToPay = listing.pricePerToken * amount;
  > |            listing.seller.transfer(amountToPay);
    |            totalAmountPayed = totalAmountPayed.add(amountToPay);
    |            totalAmount = totalAmount.add(amount);
  at buggy_29.sol(329)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |function UncheckedExternalCall_unchk40 () public
    |{  address payable addr_unchk40;
  > |   if (! addr_unchk40.send (2 ether))  
    |      {// comment1;
    |      }
  at buggy_29.sol(390)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    }
    |function bug_unchk27(address payable addr) public
  > |      {addr.send (42 ether); }
    |}
  at buggy_29.sol(417)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_29.sol(169)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |  function bug_unchk7() public{
    |address payable addr_unchk7;
  > |if (!addr_unchk7.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_29.sol(207)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    //
    |  function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |  uint256 public nextPurchaseId;
  at buggy_29.sol(215)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |  function bug_unchk31() public{
    |address payable addr_unchk31;
  > |if (!addr_unchk31.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_29.sol(270)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  event Canceled(uint256 id);
  at buggy_29.sol(278)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    //
  at buggy_29.sol(343)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    //
  at buggy_29.sol(361)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_29.sol(379)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    //
  at buggy_29.sol(407)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'RaffleTokenExchange':
    |    //
    |    function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
  > |        owner.transfer(withdrawAmount);
    |    }
    |bool public payedOut_unchk33 = false;
  at buggy_29.sol(401)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        require(!payedOut_unchk32);
    |        winner_unchk32.send(winAmount_unchk32);
  > |        payedOut_unchk32 = true;
    |    }
    |  bool public paused;
  at buggy_29.sol(170)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |            Listing storage listing = listingsById[id];
    |            require(listing.active, "Listing is not active anymore!");
  > |            listing.amountLeft = listing.amountLeft.sub(amount);
    |            require(listing.amountLeft >= 0, "Amount left needs to be higher than 0.");
    |            if(listing.amountLeft == 0) { listing.active = false; }
  at buggy_29.sol(325)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |            listing.amountLeft = listing.amountLeft.sub(amount);
    |            require(listing.amountLeft >= 0, "Amount left needs to be higher than 0.");
  > |            if(listing.amountLeft == 0) { listing.active = false; }
    |            uint256 amountToPay = listing.pricePerToken * amount;
    |            listing.seller.transfer(amountToPay);
  at buggy_29.sol(327)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        }
    |        require(totalAmountPayed <= msg.value, 'Overpayed!');
  > |        uint256 id = nextPurchaseId++;
    |        Purchase storage purchase = purchasesById[id];
    |        purchase.totalAmount = totalAmount;
  at buggy_29.sol(335)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        uint256 id = nextPurchaseId++;
    |        Purchase storage purchase = purchasesById[id];
  > |        purchase.totalAmount = totalAmount;
    |        purchase.totalAmountPayed = totalAmountPayed;
    |        purchase.timestamp = now;
  at buggy_29.sol(337)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        Purchase storage purchase = purchasesById[id];
    |        purchase.totalAmount = totalAmount;
  > |        purchase.totalAmountPayed = totalAmountPayed;
    |        purchase.timestamp = now;
    |        emit Purchased(id, totalAmount, totalAmountPayed, now);
  at buggy_29.sol(338)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        purchase.totalAmount = totalAmount;
    |        purchase.totalAmountPayed = totalAmountPayed;
  > |        purchase.timestamp = now;
    |        emit Purchased(id, totalAmount, totalAmountPayed, now);
    |    }
  at buggy_29.sol(339)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");
    |        require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is to small (increase allowance)!");
  > |        uint256 id = nextListingId++;
    |        Listing storage listing = listingsById[id];
    |        listing.initialAmount = initialAmount;
  at buggy_29.sol(351)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        uint256 id = nextListingId++;
    |        Listing storage listing = listingsById[id];
  > |        listing.initialAmount = initialAmount;
    |        listing.amountLeft = initialAmount;
    |        listing.pricePerToken = pricePerToken;
  at buggy_29.sol(353)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        Listing storage listing = listingsById[id];
    |        listing.initialAmount = initialAmount;
  > |        listing.amountLeft = initialAmount;
    |        listing.pricePerToken = pricePerToken;
    |        listing.seller = msg.sender;
  at buggy_29.sol(354)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        listing.initialAmount = initialAmount;
    |        listing.amountLeft = initialAmount;
  > |        listing.pricePerToken = pricePerToken;
    |        listing.seller = msg.sender;
    |        listing.active = true;
  at buggy_29.sol(355)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        listing.amountLeft = initialAmount;
    |        listing.pricePerToken = pricePerToken;
  > |        listing.seller = msg.sender;
    |        listing.active = true;
    |        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);
  at buggy_29.sol(356)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        listing.pricePerToken = pricePerToken;
    |        listing.seller = msg.sender;
  > |        listing.active = true;
    |        emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);
    |    }
  at buggy_29.sol(357)

[31mViolation[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        require(!payedOut_unchk44);
    |        winner_unchk44.send(winAmount_unchk44);
  > |        payedOut_unchk44 = true;
    |    }
    |    //
  at buggy_29.sol(380)

[33mWarning[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |        require(listing.active, "This listing was turned inactive already!");
    |        require(listing.seller == msg.sender || owner == msg.sender, "Only the listing owner or the contract owner can cancel the listing!");
  > |        listing.active = false;
    |        emit Canceled(id);
    |    }
  at buggy_29.sol(370)

[33mWarning[0m for UnrestrictedWrite in contract 'RaffleTokenExchange':
    |    //
    |    function setPaused(bool value) external onlyContractOwner {
  > |        paused = value;
    |    }
    |function UncheckedExternalCall_unchk40 () public
  at buggy_29.sol(386)


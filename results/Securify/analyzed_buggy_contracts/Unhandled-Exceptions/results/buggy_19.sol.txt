Processing contract: buggy_19.sol:SafeMath
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_19.sol:ethBank
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
Processing contract: buggy_19.sol:owned
  Attempt to decompile the contract with methods...
  Success. Inlining methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'ethBank':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_19.sol(161)

[31mViolation[0m for DAOConstantGas in contract 'ethBank':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_19.sol(175)

[31mViolation[0m for DAOConstantGas in contract 'ethBank':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_19.sol(260)

[31mViolation[0m for DAOConstantGas in contract 'ethBank':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_19.sol(297)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |function withdrawLeftOver_unchk9() public {
    |        require(payedOut_unchk9);
  > |        msg.sender.send(address(this).balance);
    |    }
    |
  at buggy_19.sol(107)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |        require(msg.sender == owner, "only owner can use this method"); 
    |        
  > |        msg.sender.transfer(address(this).balance);
    |    }
    |function bug_unchk19() public{
  at buggy_19.sol(127)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function joinFlexible() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(152)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function joinFixed() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(166)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function staticBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(180)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(188)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function teamAddBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(198)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function staticBonusCacl() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(212)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_1() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(222)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_2() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(230)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_3() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(238)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_4() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(251)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_5() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(265)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_6() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(272)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_7() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(280)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_8() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(288)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function activeBonusCacl_9() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(302)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function teamAddBonusCacl() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(316)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    function caclTeamPerformance() onlyOwner public{
  at buggy_19.sol(323)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function caclTeamPerformance() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(327)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function releaStaticBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(334)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function releaActiveBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(344)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    function releaTeamAddBonus() onlyOwner public{
  at buggy_19.sol(351)

[31mViolation[0m for TODAmount in contract 'ethBank':
    |    function releaTeamAddBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(address(this).balance);
    |        
    |    }
  at buggy_19.sol(355)

[33mWarning[0m for TODAmount in contract 'ethBank':
    |contract owned {
    |  function my_func_uncheck48(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |  address public owner;
  at buggy_19.sol(59)

[33mWarning[0m for TODAmount in contract 'ethBank':
    |    }
    |function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    function activeBonusCacl_2() onlyOwner public{
  at buggy_19.sol(226)

[33mWarning[0m for TODAmount in contract 'ethBank':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    function activeBonusCacl_7() onlyOwner public{
  at buggy_19.sol(276)

[33mWarning[0m for TODAmount in contract 'ethBank':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    function activeBonusCacl_8() onlyOwner public{
  at buggy_19.sol(284)

[31mViolation[0m for TODReceiver in contract 'ethBank':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_19.sol(175)

[31mViolation[0m for TODReceiver in contract 'ethBank':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_19.sol(260)

[31mViolation[0m for TODReceiver in contract 'ethBank':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_19.sol(297)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |contract owned {
    |  function my_func_uncheck48(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |  address public owner;
  at buggy_19.sol(59)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function withdrawBal_unchk17 () public{
    |	uint64 Balances_unchk17 = 0;
  > |	msg.sender.send(Balances_unchk17);}
    |
    |    /**
  at buggy_19.sol(71)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    function () payable external {}
    |function bug_unchk3(address payable addr) public
  > |      {addr.send (42 ether); }
    |    
    |    function withdrawForUser(address payable _address,uint amount) onlyOwner public{
  at buggy_19.sol(97)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function withdrawLeftOver_unchk9() public {
    |        require(payedOut_unchk9);
  > |        msg.sender.send(address(this).balance);
    |    }
    |
  at buggy_19.sol(107)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function unhandledsend_unchk26(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    
  at buggy_19.sol(143)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_19.sol(161)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_19.sol(175)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function unhandledsend_unchk38(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    function activeBonus() onlyOwner public{
  at buggy_19.sol(184)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
    |        uint64 subpot_unchk46 = 3 ether;
  > |        winner_unchk46.send(subpot_unchk46);  //bug
    |        subpot_unchk46= 0;
    |}
  at buggy_19.sol(193)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    function activeBonusCacl_2() onlyOwner public{
  at buggy_19.sol(226)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function unhandledsend_unchk14(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    function activeBonusCacl_3() onlyOwner public{
  at buggy_19.sol(234)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_19.sol(260)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function bug_unchk39(address payable addr) public
  > |      {addr.send (4 ether); }
    |    function activeBonusCacl_6() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  at buggy_19.sol(269)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    function activeBonusCacl_7() onlyOwner public{
  at buggy_19.sol(276)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    function activeBonusCacl_8() onlyOwner public{
  at buggy_19.sol(284)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_19.sol(297)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    function caclTeamPerformance() onlyOwner public{
  at buggy_19.sol(323)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |    }
    |function bug_unchk27(address payable addr) public
  > |      {addr.send (42 ether); }
    |    function releaStaticBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  at buggy_19.sol(331)

[31mViolation[0m for UnhandledException in contract 'ethBank':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    function releaTeamAddBonus() onlyOwner public{
  at buggy_19.sol(351)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    function () payable external {}
    |function bug_unchk3(address payable addr) public
  > |      {addr.send (42 ether); }
    |    
    |    function withdrawForUser(address payable _address,uint amount) onlyOwner public{
  at buggy_19.sol(97)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function unhandledsend_unchk26(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    
  at buggy_19.sol(143)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function unhandledsend_unchk38(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    function activeBonus() onlyOwner public{
  at buggy_19.sol(184)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
    |        uint64 subpot_unchk46 = 3 ether;
  > |        winner_unchk46.send(subpot_unchk46);  //bug
    |        subpot_unchk46= 0;
    |}
  at buggy_19.sol(193)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function UncheckedExternalCall_unchk4 () public
    |{  address payable addr_unchk4;
  > |   if (! addr_unchk4.send (42 ether))  
    |      {// comment1;
    |      }
  at buggy_19.sol(203)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function unhandledsend_unchk14(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    function activeBonusCacl_3() onlyOwner public{
  at buggy_19.sol(234)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |uint receivers_unchk30;
    |address payable addr_unchk30;
  > |if (!addr_unchk30.send(42 ether))
    |	{receivers_unchk30 +=1;}
    |else
  at buggy_19.sol(244)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function bug_unchk39(address payable addr) public
  > |      {addr.send (4 ether); }
    |    function activeBonusCacl_6() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  at buggy_19.sol(269)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function UncheckedExternalCall_unchk40 () public
    |{  address payable addr_unchk40;
  > |   if (! addr_unchk40.send (2 ether))  
    |      {// comment1;
    |      }
  at buggy_19.sol(307)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function bug_unchk27(address payable addr) public
  > |      {addr.send (42 ether); }
    |    function releaStaticBonus() onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  at buggy_19.sol(331)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |contract owned {
    |  function my_func_uncheck48(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |  address public owner;
  at buggy_19.sol(59)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function withdrawLeftOver_unchk9() public {
    |        require(payedOut_unchk9);
  > |        msg.sender.send(address(this).balance);
    |    }
    |
  at buggy_19.sol(107)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function bug_unchk19() public{
    |address payable addr_unchk19;
  > |if (!addr_unchk19.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_19.sol(131)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_19.sol(161)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_19.sol(175)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function bug_unchk7() public{
    |address payable addr_unchk7;
  > |if (!addr_unchk7.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_19.sol(217)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    function activeBonusCacl_2() onlyOwner public{
  at buggy_19.sol(226)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_19.sol(260)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    function activeBonusCacl_7() onlyOwner public{
  at buggy_19.sol(276)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    function activeBonusCacl_8() onlyOwner public{
  at buggy_19.sol(284)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_19.sol(297)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    function caclTeamPerformance() onlyOwner public{
  at buggy_19.sol(323)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function bug_unchk31() public{
    |address payable addr_unchk31;
  > |if (!addr_unchk31.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_19.sol(339)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    function releaTeamAddBonus() onlyOwner public{
  at buggy_19.sol(351)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    function withdrawForUser(address payable _address,uint amount) onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method");
  > |        _address.transfer(amount);
    |    }
    |bool public payedOut_unchk9 = false;
  at buggy_19.sol(101)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'ethBank':
    |    function moveBrick(uint amount) onlyOwner public{
    |        require(msg.sender == owner, "only owner can use this method"); 
  > |        msg.sender.transfer(amount);
    |    }
    |function callnotchecked_unchk25(address payable callee) public {
  at buggy_19.sol(112)

[31mViolation[0m for UnrestrictedWrite in contract 'ethBank':
    |        require(!payedOut_unchk20);
    |        winner_unchk20.send(winAmount_unchk20);
  > |        payedOut_unchk20 = true;
    |    }
    |    function joinFixed() onlyOwner public{
  at buggy_19.sol(162)

[31mViolation[0m for UnrestrictedWrite in contract 'ethBank':
    |        require(!payedOut_unchk32);
    |        winner_unchk32.send(winAmount_unchk32);
  > |        payedOut_unchk32 = true;
    |    }
    |    function staticBonus() onlyOwner public{
  at buggy_19.sol(176)

[31mViolation[0m for UnrestrictedWrite in contract 'ethBank':
    |        require(!payedOut_unchk8);
    |        winner_unchk8.send(winAmount_unchk8);
  > |        payedOut_unchk8 = true;
    |    }
    |    function activeBonusCacl_5() onlyOwner public{
  at buggy_19.sol(261)

[31mViolation[0m for UnrestrictedWrite in contract 'ethBank':
    |        require(!payedOut_unchk44);
    |        winner_unchk44.send(winAmount_unchk44);
  > |        payedOut_unchk44 = true;
    |    }
    |    function activeBonusCacl_9() onlyOwner public{
  at buggy_19.sol(298)

[33mWarning[0m for UnrestrictedWrite in contract 'ethBank':
    |    function transferOwnership(address newOwner) onlyOwner public {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |function callnotchecked_unchk37(address payable callee) public {
  at buggy_19.sol(86)

[31mViolation[0m for MissingInputValidation in contract 'owned':
    | */
    |contract owned {
  > |  function my_func_uncheck48(address payable dst) public payable{
    |        dst.call.value(msg.value)("");
    |    }
  at buggy_19.sol(58)

[33mWarning[0m for TODAmount in contract 'owned':
    |contract owned {
    |  function my_func_uncheck48(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |  address public owner;
  at buggy_19.sol(59)

[31mViolation[0m for UnhandledException in contract 'owned':
    |contract owned {
    |  function my_func_uncheck48(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |  address public owner;
  at buggy_19.sol(59)

[31mViolation[0m for UnhandledException in contract 'owned':
    |function withdrawBal_unchk17 () public{
    |	uint64 Balances_unchk17 = 0;
  > |	msg.sender.send(Balances_unchk17);}
    |
    |    /**
  at buggy_19.sol(71)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'owned':
    |contract owned {
    |  function my_func_uncheck48(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |  address public owner;
  at buggy_19.sol(59)

[33mWarning[0m for UnrestrictedWrite in contract 'owned':
    |    function transferOwnership(address newOwner) onlyOwner public {
    |        require(newOwner != address(0));
  > |        owner = newOwner;
    |    }
    |function callnotchecked_unchk37(address payable callee) public {
  at buggy_19.sol(86)


Processing contract: buggy_50.sol:digitalNotary
  Attempt to decompile the contract with methods...
  Failed to decompile methods. Attempt to decompile the contract without identifying methods...
  Propagating constants...
  Verifying patterns...
[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_50.sol(51)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_50.sol(89)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_50.sol(186)

[31mViolation[0m for DAOConstantGas in contract 'digitalNotary':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_50.sol(228)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |function withdrawLeftOver_unchk9() public {
    |        require(payedOut_unchk9);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  bool private contractactive;
  at buggy_50.sol(18)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  event  RegisterHashEvent(address indexed msgsender, bytes32 indexed hash, uint timestamp);
  at buggy_50.sol(60)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |        require(cb > 0);
    |        
  > |        manager.transfer(cb);
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  at buggy_50.sol(204)

[31mViolation[0m for TODAmount in contract 'digitalNotary':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    
  at buggy_50.sol(273)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |    }
    |function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    
  at buggy_50.sol(151)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    
  at buggy_50.sol(207)

[33mWarning[0m for TODAmount in contract 'digitalNotary':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    
  at buggy_50.sol(215)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_50.sol(51)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_50.sol(89)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_50.sol(186)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |        require(cb > 0);
    |        
  > |        manager.transfer(cb);
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  at buggy_50.sol(204)

[31mViolation[0m for TODReceiver in contract 'digitalNotary':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_50.sol(228)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    
    |  function bug_unchk3(address payable addr) public
  > |      {addr.send (42 ether); }
    |  address payable private manager;
    |    
  at buggy_50.sol(11)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function withdrawLeftOver_unchk9() public {
    |        require(payedOut_unchk9);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  bool private contractactive;
  at buggy_50.sol(18)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    
    |  function unhandledsend_unchk26(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |  mapping(bytes32 => HashRegistration[]) HashList;
  at buggy_50.sol(41)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_50.sol(51)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  event  RegisterHashEvent(address indexed msgsender, bytes32 indexed hash, uint timestamp);
  at buggy_50.sol(60)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_50.sol(89)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function unhandledsend_unchk38(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    
  at buggy_50.sol(105)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
    |        uint64 subpot_unchk46 = 3 ether;
  > |        winner_unchk46.send(subpot_unchk46);  //bug
    |        subpot_unchk46= 0;
    |}
  at buggy_50.sol(116)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    
  at buggy_50.sol(151)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function unhandledsend_unchk14(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    
  at buggy_50.sol(159)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_50.sol(186)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function bug_unchk39(address payable addr) public
  > |      {addr.send (4 ether); }
    |    
    |    function transfercontractbalance() external onlyManager
  at buggy_50.sol(196)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    
  at buggy_50.sol(207)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    
  at buggy_50.sol(215)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_50.sol(228)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    
  at buggy_50.sol(273)

[31mViolation[0m for UnhandledException in contract 'digitalNotary':
    |    }
    |function bug_unchk27(address payable addr) public
  > |      {addr.send (42 ether); }
    |    
    |    function () external
  at buggy_50.sol(294)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function bug_unchk3(address payable addr) public
  > |      {addr.send (42 ether); }
    |  address payable private manager;
    |    
  at buggy_50.sol(11)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    
    |  function unhandledsend_unchk26(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |  mapping(bytes32 => HashRegistration[]) HashList;
  at buggy_50.sol(41)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function unhandledsend_unchk38(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    
  at buggy_50.sol(105)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
    |        uint64 subpot_unchk46 = 3 ether;
  > |        winner_unchk46.send(subpot_unchk46);  //bug
    |        subpot_unchk46= 0;
    |}
  at buggy_50.sol(116)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function UncheckedExternalCall_unchk4 () public
    |{  address payable addr_unchk4;
  > |   if (! addr_unchk4.send (42 ether))  
    |      {// comment1;
    |      }
  at buggy_50.sol(126)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function unhandledsend_unchk14(address payable callee) public {
  > |    callee.send(5 ether);
    |  }
    |    
  at buggy_50.sol(159)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |uint receivers_unchk30;
    |address payable addr_unchk30;
  > |if (!addr_unchk30.send(42 ether))
    |	{receivers_unchk30 +=1;}
    |else
  at buggy_50.sol(169)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk39(address payable addr) public
  > |      {addr.send (4 ether); }
    |    
    |    function transfercontractbalance() external onlyManager
  at buggy_50.sol(196)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function UncheckedExternalCall_unchk40 () public
    |{  address payable addr_unchk40;
  > |   if (! addr_unchk40.send (2 ether))  
    |      {// comment1;
    |      }
  at buggy_50.sol(243)

[31mViolation[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function bug_unchk27(address payable addr) public
  > |      {addr.send (42 ether); }
    |    
    |    function () external
  at buggy_50.sol(294)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function withdrawLeftOver_unchk9() public {
    |        require(payedOut_unchk9);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  bool private contractactive;
  at buggy_50.sol(18)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |  function bug_unchk19() public{
    |address payable addr_unchk19;
  > |if (!addr_unchk19.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_50.sol(29)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function sendToWinner_unchk20() public {
    |        require(!payedOut_unchk20);
  > |        winner_unchk20.send(winAmount_unchk20);
    |        payedOut_unchk20 = true;
    |    }
  at buggy_50.sol(51)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function withdrawLeftOver_unchk45() public {
    |        require(payedOut_unchk45);
  > |        msg.sender.send(address(this).balance);
    |    }
    |  event  RegisterHashEvent(address indexed msgsender, bytes32 indexed hash, uint timestamp);
  at buggy_50.sol(60)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function sendToWinner_unchk32() public {
    |        require(!payedOut_unchk32);
  > |        winner_unchk32.send(winAmount_unchk32);
    |        payedOut_unchk32 = true;
    |    }
  at buggy_50.sol(89)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function bug_unchk7() public{
    |address payable addr_unchk7;
  > |if (!addr_unchk7.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_50.sol(142)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function my_func_unchk23(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    
  at buggy_50.sol(151)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function sendToWinner_unchk8() public {
    |        require(!payedOut_unchk8);
  > |        winner_unchk8.send(winAmount_unchk8);
    |        payedOut_unchk8 = true;
    |    }
  at buggy_50.sol(186)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function my_func_uncheck36(address payable dst) public payable{
  > |        dst.call.value(msg.value)("");
    |    }
    |    
  at buggy_50.sol(207)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |    }
    |function my_func_unchk35(address payable dst) public payable{
  > |        dst.send(msg.value);
    |    }
    |    
  at buggy_50.sol(215)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function sendToWinner_unchk44() public {
    |        require(!payedOut_unchk44);
  > |        winner_unchk44.send(winAmount_unchk44);
    |        payedOut_unchk44 = true;
    |    }
  at buggy_50.sol(228)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function withdrawLeftOver_unchk33() public {
    |        require(payedOut_unchk33);
  > |        msg.sender.send(address(this).balance);
    |    }
    |    
  at buggy_50.sol(273)

[33mWarning[0m for UnrestrictedEtherFlow in contract 'digitalNotary':
    |function bug_unchk31() public{
    |address payable addr_unchk31;
  > |if (!addr_unchk31.send (10 ether) || 1==1)
    |	{revert();}
    |}
  at buggy_50.sol(302)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(!payedOut_unchk20);
    |        winner_unchk20.send(winAmount_unchk20);
  > |        payedOut_unchk20 = true;
    |    }
    |  uint private HashListLength;
  at buggy_50.sol(52)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(!payedOut_unchk32);
    |        winner_unchk32.send(winAmount_unchk32);
  > |        payedOut_unchk32 = true;
    |    }
    |    
  at buggy_50.sol(90)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(!payedOut_unchk8);
    |        winner_unchk8.send(winAmount_unchk8);
  > |        payedOut_unchk8 = true;
    |    }
    |    
  at buggy_50.sol(187)

[31mViolation[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(!payedOut_unchk44);
    |        winner_unchk44.send(winAmount_unchk44);
  > |        payedOut_unchk44 = true;
    |    }
    |    
  at buggy_50.sol(229)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |/**
  > | *Submitted for verification at Etherscan.io on 2019-09-23
    |*/
    |
  at buggy_50.sol(2)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(newfee >= 0);
    |        
  > |        hashfee = newfee;
    |    }
    |function cash_unchk46(uint roundIndex, uint subpotIndex, address payable winner_unchk46) public{
  at buggy_50.sol(112)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        require(newfee >= 0);
    |        
  > |        changehashownerfee = newfee;
    |    }
    |function bug_unchk7() public{
  at buggy_50.sol(138)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |    function setcontractactive(bool contactive) external onlyManager
    |    {
  > |        contractactive = contactive;
    |    }
    |function unhandledsend_unchk14(address payable callee) public {
  at buggy_50.sol(156)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |    {
    |        require(newmngr.balance > 0);
  > |        manager = newmngr;
    |    }
    |bool public payedOut_unchk8 = false;
  at buggy_50.sol(178)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        thisregistration.registrationtime = now;
    |        
  > |        HashList[hash].push(thisregistration);
    |        
    |        HashListLength++;
  at buggy_50.sol(262)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        HashList[hash].push(thisregistration);
    |        
  > |        HashListLength++;
    |        
    |        emit RegisterHashEvent(thisregistration.owner, hash, thisregistration.registrationtime);
  at buggy_50.sol(264)

[33mWarning[0m for UnrestrictedWrite in contract 'digitalNotary':
    |        thisregistration.registrationtime = now;
    |        
  > |        HashList[hash].push(thisregistration);
    |        
    |        emit ChangeHashOwnershipEvent(msg.sender, thisregistration.owner, hash, thisregistration.registrationtime);
  at buggy_50.sol(289)


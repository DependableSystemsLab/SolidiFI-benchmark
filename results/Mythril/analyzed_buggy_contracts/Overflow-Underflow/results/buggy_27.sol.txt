==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: transfer_intou34(address,uint256)
PC address: 636
Estimated Gas Usage: 11914 - 52860
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:67

balances_intou34[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou34(address,uint256), txdata: 0x46852dfc00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001101010101001101010101010100000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: transfer_intou34(address,uint256)
PC address: 717
Estimated Gas Usage: 11914 - 52860
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:68

balances_intou34[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou34(address,uint256), txdata: 0x46852dfc00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001101010101001101010101010100000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: transfer_intou34(address,uint256)
PC address: 794
Estimated Gas Usage: 11914 - 52860
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:69

balances_intou34[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2040000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou34(address,uint256), txdata: 0x46852dfc000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000801420008020800000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ownable
Function name: withdraw_intou21()
PC address: 905
Estimated Gas Usage: 1516 - 35987
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:91

require(now > lockTime_intou21[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0xa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Ownable
Function name: withdraw_intou21()
PC address: 964
Estimated Gas Usage: 1516 - 35987
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:93

msg.sender.transfer(transferValue_intou21)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffa, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: increaseLockTime_intou21(uint256)
PC address: 1097
Estimated Gas Usage: 5772 - 26057
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:88

lockTime_intou21[msg.sender] += _secondsToIncrease

--------------------
Initial State:

Account: [CREATOR], balance: 0x3a007178804c96c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2100000000010a02, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: increaseLockTime_intou21(uint256), txdata: 0xa3af6a708000000000000000000000000000000000000000000000000000042000200000, value: 0x0
Caller: [CREATOR], function: increaseLockTime_intou21(uint256), txdata: 0xa3af6a708040000080400000004108000000000000000000000000002200004440020200, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou62(address,uint256)
PC address: 7634
Estimated Gas Usage: 12026 - 52972
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:178

balances_intou6[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x100000000040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou62(address,uint256), txdata: 0x19ad713980808080808080808080808000000000000000000000000000000000000000008080808080808080808080808001808080808080808080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou62(address,uint256)
PC address: 7715
Estimated Gas Usage: 12026 - 52972
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:179

balances_intou6[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x100000000040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou62(address,uint256), txdata: 0x19ad713980808080808080808080808000000000000000000000000000000000000000008080808080808080808080808001808080808080808080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou62(address,uint256)
PC address: 7792
Estimated Gas Usage: 12026 - 52972
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:180

balances_intou6[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40000000000020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou62(address,uint256), txdata: 0x19ad7139000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafc84b35f00000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou9()
PC address: 7903
Estimated Gas Usage: 1628 - 36099
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:324

require(now > lockTime_intou9[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000000000b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou9(), txdata: 0x1cbdc87d, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou9()
PC address: 7962
Estimated Gas Usage: 1628 - 36099
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:326

msg.sender.transfer(transferValue_intou9)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffc, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou9(), txdata: 0x1cbdc87d, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DanPanCoin
Function name: multiTransfer(address[],uint256[])
PC address: 8141
Estimated Gas Usage: 1131 - 6962
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_27.sol:398

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400800801000d5d3a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4000006000000e018, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou18(address,uint256)
PC address: 8243
Estimated Gas Usage: 12048 - 52994
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:158

balances_intou18[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc0000000000460, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou18(address,uint256), txdata: 0x1fa78c9900000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou18(address,uint256)
PC address: 8324
Estimated Gas Usage: 12048 - 52994
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:159

balances_intou18[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc0000000000460, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou18(address,uint256), txdata: 0x1fa78c9900000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou18(address,uint256)
PC address: 8401
Estimated Gas Usage: 12048 - 52994
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:160

balances_intou18[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x20000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou18(address,uint256), txdata: 0x1fa78c99000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou17()
PC address: 10207
Estimated Gas Usage: 1561 - 36032
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:285

require(now > lockTime_intou17[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x80044, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000000000008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou17()
PC address: 10266
Estimated Gas Usage: 1561 - 36032
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:287

msg.sender.transfer(transferValue_intou17)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_undrflow2(address,uint256)
PC address: 10426
Estimated Gas Usage: 11982 - 52928
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:270

balances_intou2[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x200000000000020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b7300000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080208080808080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_undrflow2(address,uint256)
PC address: 10507
Estimated Gas Usage: 11982 - 52928
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:271

balances_intou2[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x202, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x200000000000020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b7300000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080208080808080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_undrflow2(address,uint256)
PC address: 10584
Estimated Gas Usage: 11982 - 52928
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:272

balances_intou2[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x28084, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x8000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_undrflow2(address,uint256), txdata: 0x37ae6b73000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef0080000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou34(address,uint256)
PC address: 11304
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:67

balances_intou34[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x108000200032d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou34(address,uint256), txdata: 0x46852dfc00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou34(address,uint256)
PC address: 11385
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:68

balances_intou34[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x108000200032d, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou34(address,uint256), txdata: 0x46852dfc00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou34(address,uint256)
PC address: 11462
Estimated Gas Usage: 11981 - 52927
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:69

balances_intou34[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2141000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2140100000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou34(address,uint256), txdata: 0x46852dfc000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffeffffe5fafebdfdd9ffed80000000000000000000000000000000000000000000, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou26(address,uint256)
PC address: 11548
Estimated Gas Usage: 12003 - 52949
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:415

balances_intou26[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa924380808080808080808080808000000000000000000000000000000000000000008080808080808080808080808001808080808080808080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou26(address,uint256)
PC address: 11629
Estimated Gas Usage: 12003 - 52949
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:416

balances_intou26[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000011, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa924380808080808080808080808000000000000000000000000000000000000000008080808080808080808080808001808080808080808080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou26(address,uint256)
PC address: 11706
Estimated Gas Usage: 12003 - 52949
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:417

balances_intou26[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000020000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou13()
PC address: 11929
Estimated Gas Usage: 1561 - 36032
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:232

require(now > lockTime_intou13[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xb, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou13()
PC address: 11988
Estimated Gas Usage: 1561 - 36032
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:234

msg.sender.transfer(transferValue_intou13)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_ovrflow1()
PC address: 12526
Estimated Gas Usage: 1648 - 36119
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:259

require(now > lockTime_intou1[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_ovrflow1()
PC address: 12585
Estimated Gas Usage: 1648 - 36119
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:261

msg.sender.transfer(transferValue_intou1)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_ovrflow1(), txdata: 0x76be3cd1, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou38(address,uint256)
PC address: 13182
Estimated Gas Usage: 12026 - 52972
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:501

balances_intou38[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001200120202020202020082020200000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou38(address,uint256)
PC address: 13263
Estimated Gas Usage: 12026 - 52972
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:502

balances_intou38[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001200120202020202020082020200000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou38(address,uint256)
PC address: 13340
Estimated Gas Usage: 12026 - 52972
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:503

balances_intou38[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000040000404a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x20000400, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou38(address,uint256), txdata: 0x7daba891000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffec000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou21()
PC address: 13455
Estimated Gas Usage: 1539 - 36010
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:91

require(now > lockTime_intou21[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000000030052, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8004, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou21()
PC address: 13514
Estimated Gas Usage: 1539 - 36010
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:93

msg.sender.transfer(transferValue_intou21)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff5, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou21(), txdata: 0x81bb4758, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou25()
PC address: 13610
Estimated Gas Usage: 1561 - 36032
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:391

require(now > lockTime_intou25[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x161, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40000b, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xb, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou25()
PC address: 13669
Estimated Gas Usage: 1561 - 36032
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:393

msg.sender.transfer(transferValue_intou25)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou29()
PC address: 14007
Estimated Gas Usage: 1561 - 36032
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:170

require(now > lockTime_intou29[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xb, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou29(), txdata: 0x9f868ee0, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou29()
PC address: 14066
Estimated Gas Usage: 1561 - 36032
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:172

msg.sender.transfer(transferValue_intou29)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou29(), txdata: 0x9f868ee0, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou14(address,uint256)
PC address: 16600
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:545

balances_intou14[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou14(address,uint256), txdata: 0xaefa551980808080808080808080808000000000000000000000000000000000000000008080808080808080808080808001208080808080808080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou14(address,uint256)
PC address: 16681
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:546

balances_intou14[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou14(address,uint256), txdata: 0xaefa551980808080808080808080808000000000000000000000000000000000000000008080808080808080808080808001208080808080808080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou14(address,uint256)
PC address: 16758
Estimated Gas Usage: 11981 - 52927
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:547

balances_intou14[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x21c0000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x21c0020000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe4000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou33()
PC address: 16925
Estimated Gas Usage: 1583 - 36054
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:211

require(now > lockTime_intou33[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou33()
PC address: 16984
Estimated Gas Usage: 1583 - 36054
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:213

msg.sender.transfer(transferValue_intou33)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou5()
PC address: 17240
Estimated Gas Usage: 1538 - 36009
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:200

require(now > lockTime_intou5[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x400400000022c1002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x400000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou5(), txdata: 0xc017a750, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou5()
PC address: 17299
Estimated Gas Usage: 1538 - 36009
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:202

msg.sender.transfer(transferValue_intou5)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou5(), txdata: 0xc017a750, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou30(address,uint256)
PC address: 17394
Estimated Gas Usage: 12002 - 52948
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:559

balances_intou30[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40000002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou30(address,uint256)
PC address: 17475
Estimated Gas Usage: 12002 - 52948
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:560

balances_intou30[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40000002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou30(address,uint256)
PC address: 17552
Estimated Gas Usage: 12002 - 52948
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:561

balances_intou30[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x10003a184, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4000000000040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou10(address,uint256)
PC address: 17638
Estimated Gas Usage: 12024 - 52970
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:113

balances_intou10[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou10(address,uint256), txdata: 0xc176237300000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou10(address,uint256)
PC address: 17719
Estimated Gas Usage: 12024 - 52970
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:114

balances_intou10[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou10(address,uint256), txdata: 0xc176237300000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080088080808080808020800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou10(address,uint256)
PC address: 17796
Estimated Gas Usage: 12024 - 52970
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:115

balances_intou10[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou10(address,uint256), txdata: 0xc1762373000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0001404080000008000000400800000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: DanPanCoin
Function name: withdraw_intou37()
PC address: 17883
Estimated Gas Usage: 1604 - 36075
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_27.sol:299

require(now > lockTime_intou37[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0xffbfe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou37(), txdata: 0xc2bc6798, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: DanPanCoin
Function name: withdraw_intou37()
PC address: 17942
Estimated Gas Usage: 1604 - 36075
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_27.sol:301

msg.sender.transfer(transferValue_intou37)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou37(), txdata: 0xc2bc6798, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou22(address,uint256)
PC address: 18081
Estimated Gas Usage: 12002 - 52948
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:125

balances_intou22[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080208080808080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou22(address,uint256)
PC address: 18162
Estimated Gas Usage: 12002 - 52948
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_27.sol:126

balances_intou22[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001208080208080808080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: DanPanCoin
Function name: transfer_intou22(address,uint256)
PC address: 18239
Estimated Gas Usage: 12002 - 52948
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_27.sol:127

balances_intou22[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x60, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou22(address,uint256), txdata: 0xd7f8581a000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaffec400000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DanPanCoin
Function name: decreaseAllowance(address,uint256)
PC address: 19260
Estimated Gas Usage: 1090 - 1565
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_27.sol:35

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x60, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d700000000000000000000000000000000000000000000000000000000000000018080808080808080808080808001404040044040404040404010400000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: DanPanCoin
Function name: findDPPercent(uint256)
PC address: 19460
Estimated Gas Usage: 820 - 915
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_27.sol:41

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x8100200080000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10e1104201080bc1a, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: findDPPercent(uint256), txdata: 0xa5948fdbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8, value: 0x0



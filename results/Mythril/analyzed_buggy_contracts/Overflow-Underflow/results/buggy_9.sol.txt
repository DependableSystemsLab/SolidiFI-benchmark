==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Ownable
Function name: withdraw_intou17()
PC address: 452
Estimated Gas Usage: 1471 - 35942
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:61

require(now > lockTime_intou17[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Ownable
Function name: withdraw_intou17()
PC address: 511
Estimated Gas Usage: 1471 - 35942
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:63

msg.sender.transfer(transferValue_intou17)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Ownable
Function name: increaseLockTime_intou17(uint256)
PC address: 644
Estimated Gas Usage: 5794 - 26079
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_9.sol:58

lockTime_intou17[msg.sender] += _secondsToIncrease

--------------------
Initial State:

Account: [CREATOR], balance: 0x10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x6a8608080003acec, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: increaseLockTime_intou17(uint256), txdata: 0xb55c75208000000000000000000000000000000000000000000000000000000000000000, value: 0x0
Caller: [ATTACKER], function: increaseLockTime_intou17(uint256), txdata: 0xb55c75208000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: XLToken
Function name: withdraw_intou9()
PC address: 4071
Estimated Gas Usage: 1606 - 36077
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:107

require(now > lockTime_intou9[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x100000000000002b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou9(), txdata: 0x1cbdc87d, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: XLToken
Function name: withdraw_intou9()
PC address: 4130
Estimated Gas Usage: 1606 - 36077
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:109

msg.sender.transfer(transferValue_intou9)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou9(), txdata: 0x1cbdc87d, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: XLToken
Function name: withdraw_intou17()
PC address: 4449
Estimated Gas Usage: 1539 - 36010
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:61

require(now > lockTime_intou17[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000002002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: XLToken
Function name: withdraw_intou17()
PC address: 4508
Estimated Gas Usage: 1539 - 36010
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:63

msg.sender.transfer(transferValue_intou17)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou17(), txdata: 0x24243846, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou26(address,uint256)
PC address: 5277
Estimated Gas Usage: 12025 - 52971
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:134

balances_intou26[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa924300000000000000000000000040010420000010400408000001001020008000080480000080802004040200100020100000000010000008000000000410000201, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou26(address,uint256)
PC address: 5358
Estimated Gas Usage: 12025 - 52971
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:135

balances_intou26[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x20000000000000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa924300000000000000000000000040010420000010400408000001001020008000080480000080802004040200100020100000000010000008000000000410000201, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou26(address,uint256)
PC address: 5435
Estimated Gas Usage: 12025 - 52971
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_9.sol:136

balances_intou26[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x9000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou26(address,uint256), txdata: 0x46aa9243000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe0000010040000000000000000000000000000000000000200000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: XLToken
Function name: withdraw_intou13()
PC address: 5644
Estimated Gas Usage: 1560 - 36031
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:167

require(now > lockTime_intou13[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4000000000000000b, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xf, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: XLToken
Function name: withdraw_intou13()
PC address: 5703
Estimated Gas Usage: 1560 - 36031
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:169

msg.sender.transfer(transferValue_intou13)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou38(address,uint256)
PC address: 5989
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:207

balances_intou38[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002c02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x240, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000000000808080808080808080808001208080808080208080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou38(address,uint256)
PC address: 6070
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:208

balances_intou38[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x20002c02, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x240, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000000000808080808080808080808001208080808080208080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou38(address,uint256)
PC address: 6147
Estimated Gas Usage: 11981 - 52927
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_9.sol:209

balances_intou38[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x8000000a8005, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80400000000020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou38(address,uint256), txdata: 0x7daba891000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa2000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: XLToken
Function name: withdraw_intou25()
PC address: 6248
Estimated Gas Usage: 1583 - 36054
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:119

require(now > lockTime_intou25[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x100000000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: XLToken
Function name: withdraw_intou25()
PC address: 6307
Estimated Gas Usage: 1583 - 36054
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:121

msg.sender.transfer(transferValue_intou25)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou25(), txdata: 0x835185a4, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou14(address,uint256)
PC address: 6700
Estimated Gas Usage: 12068 - 53014
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:263

balances_intou14[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1502000800001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc0402000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000000808080808080808080808001808080808080808080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou14(address,uint256)
PC address: 6781
Estimated Gas Usage: 12068 - 53014
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:264

balances_intou14[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1502000800001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc0402000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa551900000000000000000000000000000000000000000000000000000000000000000000808080808080808080808001808080808080808080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou14(address,uint256)
PC address: 6858
Estimated Gas Usage: 12068 - 53014
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_9.sol:265

balances_intou14[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x40004080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou14(address,uint256), txdata: 0xaefa5519000000000000000000000000affeaffeaffeaffeaffeaffeaffeaffeaffeaffe8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: XLToken
Function name: withdraw_intou33()
PC address: 7025
Estimated Gas Usage: 1538 - 36009
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:397

require(now > lockTime_intou33[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x100040000000010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: XLToken
Function name: withdraw_intou33()
PC address: 7084
Estimated Gas Usage: 1538 - 36009
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:399

msg.sender.transfer(transferValue_intou33)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou30(address,uint256)
PC address: 7338
Estimated Gas Usage: 12046 - 52992
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:285

balances_intou30[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x200f5060, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000000808080808080808080808001208080808080208080808080800000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou30(address,uint256)
PC address: 7419
Estimated Gas Usage: 12046 - 52992
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_9.sol:286

balances_intou30[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x200f5060, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000000000808080808080808080808001208080808080208080808080800000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: XLToken
Function name: transfer_intou30(address,uint256)
PC address: 7496
Estimated Gas Usage: 12046 - 52992
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_9.sol:287

balances_intou30[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x20c00001400fec00, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8a, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef08000800e0000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: XLToken
Function name: withdraw_intou37()
PC address: 7583
Estimated Gas Usage: 1626 - 36097
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_9.sol:91

require(now > lockTime_intou37[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x13feffffffed34bcb, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou37(), txdata: 0xc2bc6798, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: XLToken
Function name: withdraw_intou37()
PC address: 7642
Estimated Gas Usage: 1626 - 36097
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_9.sol:93

msg.sender.transfer(transferValue_intou37)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou37(), txdata: 0xc2bc6798, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: XLToken
Function name: gasprice_bit_ether(int128)
PC address: 9025
Estimated Gas Usage: 990 - 1275
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_9.sol:39

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: gasprice_bit_ether(int128), txdata: 0x23b872dd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101010101010101010101010000000000000000000000000000000000000000000000000000000000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: XLToken
Function name: mint(address,uint256)
PC address: 9053
Estimated Gas Usage: 1694 - 2119
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_9.sol:48

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x304, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: mint(address,uint256), txdata: 0x40c10f19fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe55c0a2c2f40000, value: 0x0



==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou26(address,uint256)
PC address: 5682
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_29.sol:170

balances_intou26[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x44c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa924300000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001101010101001101010101010100000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou26(address,uint256)
PC address: 5763
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_29.sol:171

balances_intou26[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x44c, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa924300000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001101010101001101010101010100000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou26(address,uint256)
PC address: 5840
Estimated Gas Usage: 11981 - 52927
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_29.sol:172

balances_intou26[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080000000001801, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou26(address,uint256), txdata: 0x46aa9243aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaafe8880800002620c024820540040000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RaffleTokenExchange
Function name: withdraw_intou13()
PC address: 5955
Estimated Gas Usage: 1516 - 35987
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_29.sol:278

require(now > lockTime_intou13[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0x20f03b6, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xb, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: RaffleTokenExchange
Function name: withdraw_intou13()
PC address: 6014
Estimated Gas Usage: 1516 - 35987
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_29.sol:280

msg.sender.transfer(transferValue_intou13)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffff4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou13(), txdata: 0x5c03b626, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: increaseLockTime_intou33(uint256)
PC address: 6166
Estimated Gas Usage: 5796 - 26081
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_29.sol:413

lockTime_intou33[msg.sender] += _secondsToIncrease

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000400020f8001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20009000880100004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x420400018a90, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: increaseLockTime_intou33(uint256), txdata: 0x7d7569718080400000000000000000000080000000000020042080008001080211014040, value: 0x0
Caller: [ATTACKER], function: increaseLockTime_intou33(uint256), txdata: 0x7d7569718004008400100010080208800000000000000000000000800044000000000000, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou38(address,uint256)
PC address: 6245
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_29.sol:198

balances_intou38[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000882, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001101010101001101010101010100000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou38(address,uint256)
PC address: 6326
Estimated Gas Usage: 11981 - 52927
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_29.sol:199

balances_intou38[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000882, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou38(address,uint256), txdata: 0x7daba89100000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001101010101001101010101010100000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou38(address,uint256)
PC address: 6403
Estimated Gas Usage: 11981 - 52927
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_29.sol:200

balances_intou38[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x2041000000001010, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou38(address,uint256), txdata: 0x7daba891000000000000000000000000deadbeefdeadbeefdeadbeefdeadbeefdeadbeef8000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Multiple Calls in a Single Transaction ====
SWC ID: 113
Severity: Low
Contract: RaffleTokenExchange
Function name: addListing(uint256,uint256)
PC address: 7063
Estimated Gas Usage: 37900 - 229546
Multiple calls are executed in the same transaction.
This call is executed after a previous call in the same transaction. Try to isolate each call, transfer or send into its own transaction.
--------------------
In file: buggy_29.sol:355

raffleContract.allowance(msg.sender, address(this))

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: addListing(uint256,uint256), txdata: 0x836cf6e95de2ef3f00000000000000000000000157ff17ff80fec2c000000000000000030000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: RaffleTokenExchange
Function name: withdraw_intou33()
PC address: 7702
Estimated Gas Usage: 1538 - 36009
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_29.sol:416

require(now > lockTime_intou33[msg.sender])

--------------------
Initial State:

Account: [CREATOR], balance: 0xa, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: RaffleTokenExchange
Function name: withdraw_intou33()
PC address: 7761
Estimated Gas Usage: 1538 - 36009
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_29.sol:418

msg.sender.transfer(transferValue_intou33)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10c05420ffffe, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_intou33(), txdata: 0xb1f09e89, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: increaseLockTime_intou13(uint256)
PC address: 7857
Estimated Gas Usage: 5839 - 26124
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_29.sol:275

lockTime_intou13[msg.sender] += _secondsToIncrease

--------------------
Initial State:

Account: [CREATOR], balance: 0x1020000000102, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x52b00120020000802, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: increaseLockTime_intou13(uint256), txdata: 0xb21d31b680000000000000000000000000000000000000a8020824000100200180400000, value: 0x0
Caller: [CREATOR], function: increaseLockTime_intou13(uint256), txdata: 0xb21d31b68040000000000024001000000000000000000000000000001000000000001008, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou30(address,uint256)
PC address: 7936
Estimated Gas Usage: 12024 - 52970
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_29.sol:310

balances_intou30[msg.sender] - _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001104040404010404040404040400000000001, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou30(address,uint256)
PC address: 8017
Estimated Gas Usage: 12024 - 52970
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_29.sol:311

balances_intou30[msg.sender] -= _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: transfer_intou30(address,uint256), txdata: 0xc036563e00000000000000000000000000000000000000000000000000000000000000008080808080808080808080808001104040404010404040404040400000000001, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: RaffleTokenExchange
Function name: transfer_intou30(address,uint256)
PC address: 8094
Estimated Gas Usage: 12024 - 52970
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_29.sol:312

balances_intou30[_to] += _value

--------------------
Initial State:

Account: [CREATOR], balance: 0x1c0000500000101, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x51e2d22000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: transfer_intou30(address,uint256), txdata: 0xc036563e000000000000000000000000aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa8000000000000000000000000000000000000000000000000000000000000000, value: 0x0



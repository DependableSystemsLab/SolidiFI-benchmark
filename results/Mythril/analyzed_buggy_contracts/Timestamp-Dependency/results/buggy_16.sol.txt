==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: Owned
Function name: play_tmstmp3(uint256)
PC address: 390
Estimated Gas Usage: 5738 - 26163
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:118

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563ebfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Owned
Function name: play_tmstmp3(uint256)
PC address: 396
Estimated Gas Usage: 5738 - 26163
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:118

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp3 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563eb7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Owned
Function name: bug_tmstmp16()
PC address: 496
Estimated Gas Usage: 1459 - 35740
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:98

require(now != pastBlockTime_tmstmp16)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40020098204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13b801004c1081000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x902040000000102, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp16(), txdata: 0x743c2d92, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Owned
Function name: bug_tmstmp16()
PC address: 523
Estimated Gas Usage: 1459 - 35740
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:100

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40020098204, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x13b801004c1081000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x902040000000102, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp16(), txdata: 0x743c2d92, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: Owned
Function name: bug_tmstmp16()
PC address: 594
Estimated Gas Usage: 1459 - 35740
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:101

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421011405400b4a00, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x14a875828210f2051, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp16(), txdata: 0x743c2d92, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp20()
PC address: 5638
Estimated Gas Usage: 1507 - 35788
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:241

require(now != pastBlockTime_tmstmp20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000004841, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x92004, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp20()
PC address: 5665
Estimated Gas Usage: 1507 - 35788
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:243

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40080000000004841, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x92004, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp20()
PC address: 5736
Estimated Gas Usage: 1507 - 35788
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:244

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421000c04020960a2, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16b060a2463069119, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp40()
PC address: 6648
Estimated Gas Usage: 1550 - 35831
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:412

require(now != pastBlockTime_tmstmp40)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000080108, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x298000010006b310, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp40()
PC address: 6675
Estimated Gas Usage: 1550 - 35831
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:414

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000080108, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x298000010006b310, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp40()
PC address: 6746
Estimated Gas Usage: 1550 - 35831
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:415

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x420410c0440004f5a, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16002122d6303a005, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp7(uint256)
PC address: 7334
Estimated Gas Usage: 5851 - 26276
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:305

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp7(uint256), txdata: 0x2831fe30fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp7(uint256)
PC address: 7340
Estimated Gas Usage: 5851 - 26276
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:305

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp7 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp7(uint256), txdata: 0x2831fe307ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp15(uint256)
PC address: 7422
Estimated Gas Usage: 5873 - 26298
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:166

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp15(uint256), txdata: 0x2d79f3ccfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp15(uint256)
PC address: 7428
Estimated Gas Usage: 5873 - 26298
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:166

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp15 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x41004c0001008214, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp15(uint256), txdata: 0x2d79f3cc7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff98080, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp26(uint256)
PC address: 7731
Estimated Gas Usage: 5859 - 26284
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:232

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp26(uint256), txdata: 0x35e7405ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp26(uint256)
PC address: 7737
Estimated Gas Usage: 5859 - 26284
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:232

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp26 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp30(uint256)
PC address: 7937
Estimated Gas Usage: 5816 - 26241
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:341

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp30(uint256), txdata: 0x38861bd8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp30(uint256)
PC address: 7943
Estimated Gas Usage: 5816 - 26241
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:341

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp30 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp30(uint256), txdata: 0x38861bd83ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa6880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp34(uint256)
PC address: 8019
Estimated Gas Usage: 5838 - 26263
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:181

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp34(uint256), txdata: 0x38f45e36fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp34(uint256)
PC address: 8025
Estimated Gas Usage: 5838 - 26263
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:181

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp34 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp34(uint256), txdata: 0x38f45e367ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp36()
PC address: 8559
Estimated Gas Usage: 1549 - 35830
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:387

require(now != pastBlockTime_tmstmp36)

--------------------
Initial State:

Account: [CREATOR], balance: 0x401c0002059040194, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10004080000042a, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp36()
PC address: 8586
Estimated Gas Usage: 1549 - 35830
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:389

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x401c0002059040194, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10004080000042a, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp36()
PC address: 8657
Estimated Gas Usage: 1549 - 35830
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:390

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x26004400152400000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2008000010d00010, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp28()
PC address: 8714
Estimated Gas Usage: 1571 - 35852
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:172

require(now != pastBlockTime_tmstmp28)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20189, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200818100c0000020, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50004002a40000002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp28(), txdata: 0x56a3ed38, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp28()
PC address: 8741
Estimated Gas Usage: 1571 - 35852
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:174

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x20189, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x200818100c0000020, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50004002a40000002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp28(), txdata: 0x56a3ed38, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp28()
PC address: 8812
Estimated Gas Usage: 1571 - 35852
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:175

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2a1c10d11a6cfdc5b, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x52707500400003324, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp28(), txdata: 0x56a3ed38, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp10(uint256)
PC address: 8876
Estimated Gas Usage: 5837 - 26262
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:191

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp10(uint256), txdata: 0x5d2cadbffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp10(uint256)
PC address: 8882
Estimated Gas Usage: 5837 - 26262
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:191

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp10 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x118ca9bc, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80000040000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp10(uint256), txdata: 0x5d2cadbf7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp3(uint256)
PC address: 8963
Estimated Gas Usage: 5872 - 26297
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:118

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563ebfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp3(uint256)
PC address: 8969
Estimated Gas Usage: 5872 - 26297
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:118

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp3 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x100400000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563eb7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp16()
PC address: 9142
Estimated Gas Usage: 1526 - 35807
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:98

require(now != pastBlockTime_tmstmp16)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc1e02212, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x140018300c1a02000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40000022000600, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp16(), txdata: 0x743c2d92, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp16()
PC address: 9169
Estimated Gas Usage: 1526 - 35807
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:100

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0xc1e02212, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x140018300c1a02000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40000022000600, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp16(), txdata: 0x743c2d92, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp16()
PC address: 9240
Estimated Gas Usage: 1526 - 35807
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:101

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10004d00400010000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x44801722c61000003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp16(), txdata: 0x743c2d92, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp24()
PC address: 9446
Estimated Gas Usage: 1506 - 35787
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:151

require(now != pastBlockTime_tmstmp24)

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000040100040609, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x142020840002110, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp24(), txdata: 0x7adde495, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp24()
PC address: 9473
Estimated Gas Usage: 1506 - 35787
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:153

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x41000040100040609, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x142020840002110, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp24(), txdata: 0x7adde495, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp24()
PC address: 9544
Estimated Gas Usage: 1506 - 35787
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:154

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x539290c0942000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x201522923000002, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp24(), txdata: 0x7adde495, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp23(uint256)
PC address: 9583
Estimated Gas Usage: 5829 - 26254
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:324

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp23(uint256)
PC address: 9589
Estimated Gas Usage: 5829 - 26254
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:324

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp23 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp35(uint256)
PC address: 9671
Estimated Gas Usage: 5851 - 26276
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:402

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp35(uint256), txdata: 0x88d5cb7cfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp35(uint256)
PC address: 9677
Estimated Gas Usage: 5851 - 26276
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:402

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp35 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp35(uint256), txdata: 0x88d5cb7c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp27(uint256)
PC address: 9774
Estimated Gas Usage: 5828 - 26253
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:439

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp27(uint256), txdata: 0x8d356d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp27(uint256)
PC address: 9780
Estimated Gas Usage: 5828 - 26253
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:439

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp27 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x9, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp27(uint256), txdata: 0x8d356d077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp38(uint256)
PC address: 10053
Estimated Gas Usage: 5793 - 26218
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:282

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp38(uint256), txdata: 0x975b58d9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp38(uint256)
PC address: 10059
Estimated Gas Usage: 5793 - 26218
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:282

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp38 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp38(uint256), txdata: 0x975b58d97ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp31(uint256)
PC address: 10140
Estimated Gas Usage: 5828 - 26253
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:450

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp31(uint256), txdata: 0x99d8cc4dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp31(uint256)
PC address: 10146
Estimated Gas Usage: 5828 - 26253
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:450

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp31 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x200000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp31(uint256), txdata: 0x99d8cc4d7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff98880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp2(uint256)
PC address: 10223
Estimated Gas Usage: 5837 - 26262
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:74

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp2(uint256), txdata: 0x9d595776fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp2(uint256)
PC address: 10229
Estimated Gas Usage: 5837 - 26262
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:74

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp2 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x28000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp2(uint256), txdata: 0x9d5957767ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp19(uint256)
PC address: 10310
Estimated Gas Usage: 5872 - 26297
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:223

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp19(uint256), txdata: 0xa0c95111fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp19(uint256)
PC address: 10316
Estimated Gas Usage: 5872 - 26297
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:223

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp19 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp19(uint256), txdata: 0xa0c951117ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp12()
PC address: 10474
Estimated Gas Usage: 1548 - 35829
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:55

require(now != pastBlockTime_tmstmp12)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080100014e10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50084500820008a02, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp12(), txdata: 0xac8e4261, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp12()
PC address: 10501
Estimated Gas Usage: 1548 - 35829
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:57

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1080100014e10, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50084500820008a02, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp12(), txdata: 0xac8e4261, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp12()
PC address: 10572
Estimated Gas Usage: 1548 - 35829
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:58

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x420c10305300220b0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x56102000131000003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp12(), txdata: 0xac8e4261, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp4()
PC address: 10648
Estimated Gas Usage: 1505 - 35786
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:291

require(now != pastBlockTime_tmstmp4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000e0804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10286502000019118, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp4()
PC address: 10675
Estimated Gas Usage: 1505 - 35786
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:293

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x1000e0804, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10286502000019118, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp4()
PC address: 10746
Estimated Gas Usage: 1505 - 35786
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:294

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x121831010420af2f6, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x68018ff061000109, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp11(uint256)
PC address: 10800
Estimated Gas Usage: 5850 - 26275
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:65

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp11(uint256), txdata: 0xc99d77a1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp11(uint256)
PC address: 10806
Estimated Gas Usage: 5850 - 26275
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:65

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp11 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000251fdf7fe, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10044000040044000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp11(uint256), txdata: 0xc99d77a17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp22(uint256)
PC address: 10882
Estimated Gas Usage: 5859 - 26284
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:197

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp22(uint256), txdata: 0xcf206f53fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp22(uint256)
PC address: 10888
Estimated Gas Usage: 5859 - 26284
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:197

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp22 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xa0000000020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp22(uint256), txdata: 0xcf206f537ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp32()
PC address: 10987
Estimated Gas Usage: 1504 - 35785
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:265

require(now != pastBlockTime_tmstmp32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x411c0110498081041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x102c5040420820040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp32()
PC address: 11014
Estimated Gas Usage: 1504 - 35785
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:267

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x411c0110498081041, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x102c5040420820040, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp32()
PC address: 11085
Estimated Gas Usage: 1504 - 35785
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:268

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x101c00e04022440e1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10102c21000007, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp8()
PC address: 11157
Estimated Gas Usage: 1548 - 35829
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:353

require(now != pastBlockTime_tmstmp8)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0002800000a0004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x300400440000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: bug_tmstmp8()
PC address: 11184
Estimated Gas Usage: 1548 - 35829
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:355

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0002800000a0004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x300400440000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: ExclusivePlatform
Function name: bug_tmstmp8()
PC address: 11255
Estimated Gas Usage: 1548 - 35829
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_16.sol:356

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x202030b03c5f42000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4a205820aa000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp39(uint256)
PC address: 12177
Estimated Gas Usage: 5849 - 26274
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:378

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp39(uint256), txdata: 0xec91c7e1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp39(uint256)
PC address: 12183
Estimated Gas Usage: 5849 - 26274
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:378

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp39 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp39(uint256), txdata: 0xec91c7e17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: ExclusivePlatform
Function name: play_tmstmp14(uint256)
PC address: 12260
Estimated Gas Usage: 5858 - 26283
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_16.sol:332

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp14(uint256), txdata: 0xecd97e16fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: ExclusivePlatform
Function name: play_tmstmp14(uint256)
PC address: 12266
Estimated Gas Usage: 5858 - 26283
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_16.sol:332

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp14 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp14(uint256), txdata: 0xecd97e167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0



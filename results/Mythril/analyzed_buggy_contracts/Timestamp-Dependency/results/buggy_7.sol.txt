==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp20()
PC address: 3339
Estimated Gas Usage: 1484 - 35765
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:102

require(now != pastBlockTime_tmstmp20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x18004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1184302000a080020, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x302001008200c0804, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp20()
PC address: 3366
Estimated Gas Usage: 1484 - 35765
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:104

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x18004000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1184302000a080020, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x302001008200c0804, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_tmstmp20()
PC address: 3437
Estimated Gas Usage: 1484 - 35765
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_7.sol:105

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x3054188e42b200000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x409842504e2a10046, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4dc1c2540ad011008, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp40()
PC address: 3521
Estimated Gas Usage: 1528 - 35809
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:271

require(now != pastBlockTime_tmstmp40)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000100020006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000423001000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp40()
PC address: 3548
Estimated Gas Usage: 1528 - 35809
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:273

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000100020006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10000000423001000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_tmstmp40()
PC address: 3619
Estimated Gas Usage: 1528 - 35809
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_7.sol:274

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40020000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40c0900141df81022, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x54a12b1ca7d78143c, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp7(uint256)
PC address: 3658
Estimated Gas Usage: 5851 - 26276
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:153

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp7(uint256), txdata: 0x2831fe30fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp7(uint256)
PC address: 3664
Estimated Gas Usage: 5851 - 26276
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:153

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp7 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x80000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x6bc040300a8a5400, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp7(uint256), txdata: 0x2831fe3007fffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp26(uint256)
PC address: 3756
Estimated Gas Usage: 5771 - 26196
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:92

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x20100400c1008001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x8000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp26(uint256)
PC address: 3762
Estimated Gas Usage: 5771 - 26196
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:92

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp26 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x482081be91f884440, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x508840000024ff400, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405f0000000000000000000000000000000000000000000000000000000000006880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp30(uint256)
PC address: 3838
Estimated Gas Usage: 5793 - 26218
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:185

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0xc800000004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4040460020020000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp30(uint256), txdata: 0x38861bd8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp30(uint256)
PC address: 3844
Estimated Gas Usage: 5793 - 26218
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:185

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp30 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp30(uint256), txdata: 0x38861bd87ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp36()
PC address: 3965
Estimated Gas Usage: 1549 - 35830
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:242

require(now != pastBlockTime_tmstmp36)

--------------------
Initial State:

Account: [CREATOR], balance: 0x9000000000002020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80200c03f4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp36()
PC address: 3992
Estimated Gas Usage: 1549 - 35830
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:244

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x9000000000002020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80200c03f4, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_tmstmp36()
PC address: 4063
Estimated Gas Usage: 1549 - 35830
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_7.sol:245

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0xdd000000000002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x101fc4801400806a4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x6b7e1e2d630c8041, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: updateAccount(string,string)
PC address: 4265
Estimated Gas Usage: 32348 - 156170
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_7.sol:283

btc[to] = btc[from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400000035aa780001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xeedfa517edbe7e02, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: updateAccount(string,string), txdata: 0x534c1bdd000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Write to an arbitrary storage slot ====
SWC ID: 124
Severity: High
Contract: AccountWallet
Function name: updateAccount(string,string)
PC address: 4454
Estimated Gas Usage: 27291 - 131113
Any storage slot can be written by the caller.
The attacker can modify any value in the storage. This can lead to unintended consequences.
--------------------
In file: buggy_7.sol:284

eth[to] = eth[from]

--------------------
Initial State:

Account: [CREATOR], balance: 0x400030c81cd80d00a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x42204000002810800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: updateAccount(string,string), txdata: 0x534c1bdd000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Write to an arbitrary storage slot ====
SWC ID: 124
Severity: High
Contract: AccountWallet
Function name: updateAccount(string,string)
PC address: 4632
Estimated Gas Usage: 32348 - 156170
Any storage slot can be written by the caller.
The attacker can modify any value in the storage. This can lead to unintended consequences.
--------------------
In file: buggy_7.sol:287

eth[from] = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4240044410011d520, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc5000040061480, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: updateAccount(string,string), txdata: 0x534c1bdd000000000000000000000000000000000000000000000000000000000000002100000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp3(uint256)
PC address: 4922
Estimated Gas Usage: 5872 - 26297
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:224

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1a114200008fc6a0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000011, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563ebfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp3(uint256)
PC address: 4928
Estimated Gas Usage: 5872 - 26297
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:224

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp3 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x4011b208400049508, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xeebfe9fbaff0e1af, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp3(uint256), txdata: 0x621563eb07fffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp23(uint256)
PC address: 5113
Estimated Gas Usage: 5827 - 26252
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:163

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200002000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp23(uint256)
PC address: 5119
Estimated Gas Usage: 5827 - 26252
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:163

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp23 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x40800000002008400, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x40b58894ffffff00, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp35(uint256)
PC address: 5201
Estimated Gas Usage: 5849 - 26274
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:256

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1841046, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1008000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp35(uint256), txdata: 0x88d5cb7cfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp35(uint256)
PC address: 5207
Estimated Gas Usage: 5849 - 26274
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:256

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp35 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x18000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4110504040002001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp35(uint256), txdata: 0x88d5cb7c7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp27(uint256)
PC address: 5304
Estimated Gas Usage: 5784 - 26209
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:307

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2002820140850276, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x20000001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp27(uint256), txdata: 0x8d356d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp27(uint256)
PC address: 5310
Estimated Gas Usage: 5784 - 26209
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:307

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp27 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0xc21400284182042, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1b284404060212c00, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp27(uint256), txdata: 0x8d356d0707fffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp38(uint256)
PC address: 5517
Estimated Gas Usage: 5837 - 26262
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:129

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp38(uint256), txdata: 0x975b58d9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp38(uint256)
PC address: 5523
Estimated Gas Usage: 5837 - 26262
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:129

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp38 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp38(uint256), txdata: 0x975b58d97ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp31(uint256)
PC address: 5604
Estimated Gas Usage: 5872 - 26297
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:26

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x150000000844028a, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp31(uint256), txdata: 0x99d8cc4dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp31(uint256)
PC address: 5610
Estimated Gas Usage: 5872 - 26297
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:26

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp31 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp31(uint256), txdata: 0x99d8cc4d7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp2(uint256)
PC address: 5687
Estimated Gas Usage: 5770 - 26195
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:15

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x800a0008020000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp2(uint256), txdata: 0x9d595776fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp2(uint256)
PC address: 5693
Estimated Gas Usage: 5770 - 26195
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:15

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp2 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x20080200484038480, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1214204040f7ff400, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp2(uint256), txdata: 0x9d59577607fffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp19(uint256)
PC address: 5774
Estimated Gas Usage: 5805 - 26230
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:65

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x48400000500800094, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp19(uint256), txdata: 0xa0c95111fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp19(uint256)
PC address: 5780
Estimated Gas Usage: 5805 - 26230
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:65

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp19 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x849, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16886000001fff800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp19(uint256), txdata: 0xa0c951111ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: getAddress(string)
PC address: 6022
Estimated Gas Usage: 4244 - 12337
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_7.sol:251

return (btc[account], eth[account])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x400000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: getAddress(string), txdata: 0xbf40fac10000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Underflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: getAddress(string)
PC address: 6074
Estimated Gas Usage: 4244 - 12337
The binary subtraction can underflow.
The operands of the subtraction operation are not sufficiently constrained. The subtraction could therefore result in an integer underflow. Prevent the underflow by checking inputs or ensure sure that the underflow is caught by an assertion.
--------------------
In file: buggy_7.sol:251

return (btc[account], eth[account])

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x400000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: getAddress(string), txdata: 0xbf40fac10000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp4()
PC address: 6204
Estimated Gas Usage: 1482 - 35763
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:139

require(now != pastBlockTime_tmstmp4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x500000000000010a0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp4()
PC address: 6231
Estimated Gas Usage: 1482 - 35763
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:141

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x12, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x500000000000010a0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_tmstmp4()
PC address: 6302
Estimated Gas Usage: 1482 - 35763
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_7.sol:142

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2019003d40091f90, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x423222805400a0290, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x568280c0123009768, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Write to an arbitrary storage slot ====
SWC ID: 124
Severity: High
Contract: AccountWallet
Function name: setAddress(string,string,address)
PC address: 6566
Estimated Gas Usage: 29542 - 141703
Any storage slot can be written by the caller.
The attacker can modify any value in the storage. This can lead to unintended consequences.
--------------------
In file: buggy_7.sol:264

eth[account] = ethAddress

--------------------
Initial State:

Account: [CREATOR], balance: 0x308482100000012, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x405000000040a010, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: setAddress(string,string,address), txdata: 0xd4c8e97c0000000000000000000000000000000000000000000000000000000000000041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp32()
PC address: 6807
Estimated Gas Usage: 1548 - 35829
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:116

require(now != pastBlockTime_tmstmp32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2244145100a305210, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x48250008001c44, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp32()
PC address: 6834
Estimated Gas Usage: 1548 - 35829
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:118

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x2244145100a305210, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x48250008001c44, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_tmstmp32()
PC address: 6905
Estimated Gas Usage: 1548 - 35829
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_7.sol:119

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4040100068200000e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x415409e4c19090000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x401049c2791af809, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Write to an arbitrary storage slot ====
SWC ID: 124
Severity: High
Contract: AccountWallet
Function name: deleteAccount(string)
PC address: 7175
Estimated Gas Usage: 14005 - 63951
Any storage slot can be written by the caller.
The attacker can modify any value in the storage. This can lead to unintended consequences.
--------------------
In file: buggy_7.sol:300

eth[account] = address(0)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2400c008, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc000000008a0c0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: deleteAccount(string), txdata: 0xd5e363f90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp8()
PC address: 7309
Estimated Gas Usage: 1481 - 35762
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:196

require(now != pastBlockTime_tmstmp8)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa400000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4fa020c0000008020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: bug_tmstmp8()
PC address: 7336
Estimated Gas Usage: 1481 - 35762
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:198

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0xa400000000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4fa020c0000008020, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: AccountWallet
Function name: bug_tmstmp8()
PC address: 7407
Estimated Gas Usage: 1481 - 35762
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_7.sol:199

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c10805420ffffe, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16a030a0921080001, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp39(uint256)
PC address: 7446
Estimated Gas Usage: 5804 - 26229
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:211

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2080040000400001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1020000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp39(uint256), txdata: 0xec91c7e1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp39(uint256)
PC address: 7452
Estimated Gas Usage: 5804 - 26229
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:211

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp39 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp39(uint256), txdata: 0xec91c7e17ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: AccountWallet
Function name: play_tmstmp14(uint256)
PC address: 7529
Estimated Gas Usage: 5813 - 26238
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_7.sol:174

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1104040030084006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x20000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp14(uint256), txdata: 0xecd97e16fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: AccountWallet
Function name: play_tmstmp14(uint256)
PC address: 7535
Estimated Gas Usage: 5813 - 26238
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_7.sol:174

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp14 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp14(uint256), txdata: 0xecd97e167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0





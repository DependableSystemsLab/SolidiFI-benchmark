==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp20()
PC address: 3494
Estimated Gas Usage: 1484 - 35765
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:137

require(now != pastBlockTime_tmstmp20)

--------------------
Initial State:

Account: [CREATOR], balance: 0x10047230509e80808, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50105460000018100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp20()
PC address: 3521
Estimated Gas Usage: 1484 - 35765
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:139

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x10047230509e80808, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50105460000018100, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: HYDROGEN
Function name: bug_tmstmp20()
PC address: 3592
Estimated Gas Usage: 1484 - 35765
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_28.sol:140

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2ac41becdce79402, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2020047db03fcd934, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x42c08af70f1aed900, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp20(), txdata: 0x05681232, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp40()
PC address: 4110
Estimated Gas Usage: 1550 - 35831
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:233

require(now != pastBlockTime_tmstmp40)

--------------------
Initial State:

Account: [CREATOR], balance: 0xa1e230147edd01a5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10000ffb3ffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp40()
PC address: 4137
Estimated Gas Usage: 1550 - 35831
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:235

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0xa1e230147edd01a5, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10000ffb3ffffffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: HYDROGEN
Function name: bug_tmstmp40()
PC address: 4208
Estimated Gas Usage: 1550 - 35831
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_28.sol:236

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x40000000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x44208230041000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x43e04022004000003, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp40(), txdata: 0x17c6abfa, value: 0x8ac7230489e80000

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HYDROGEN
Function name: multiTransfer(address[],uint256[])
PC address: 4294
Estimated Gas Usage: 1064 - 6895
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_28.sol:242

amounts[i]

--------------------
Initial State:

Account: [CREATOR], balance: 0x101000000003803, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1000000000004, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc4016f400910ae, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: multiTransfer(address[],uint256[]), txdata: 0x1e89d5450000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp7(uint256)
PC address: 5460
Estimated Gas Usage: 5828 - 26253
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:90

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp7(uint256), txdata: 0x2831fe30fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp7(uint256)
PC address: 5466
Estimated Gas Usage: 5828 - 26253
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:90

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp7 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x10002000002000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50002000728000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp7(uint256), txdata: 0x2831fe307ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp26(uint256)
PC address: 5581
Estimated Gas Usage: 5771 - 26196
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:131

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp26(uint256), txdata: 0x35e7405ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp26(uint256)
PC address: 5587
Estimated Gas Usage: 5771 - 26196
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:131

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp26 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x43050010100432500, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp26(uint256), txdata: 0x35e7405f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff98880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp30(uint256)
PC address: 5663
Estimated Gas Usage: 5793 - 26218
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:165

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp30(uint256), txdata: 0x38861bd8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp30(uint256)
PC address: 5669
Estimated Gas Usage: 5793 - 26218
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:165

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp30 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0xa0008800048002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x47fffffe2, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp30(uint256), txdata: 0x38861bd87ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp36()
PC address: 6346
Estimated Gas Usage: 1571 - 35852
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:196

require(now != pastBlockTime_tmstmp36)

--------------------
Initial State:

Account: [CREATOR], balance: 0x400810400000a1944, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c1300091200040, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x102000200, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp36()
PC address: 6373
Estimated Gas Usage: 1571 - 35852
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:198

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x400810400000a1944, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421c1300091200040, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x102000200, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: HYDROGEN
Function name: bug_tmstmp36()
PC address: 6444
Estimated Gas Usage: 1571 - 35852
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_28.sol:199

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4098108001f400004, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x320c10802cd7f7596, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x260004222607fee29, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp36(), txdata: 0x529ec451, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp3(uint256)
PC address: 6513
Estimated Gas Usage: 5827 - 26252
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:65

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp3(uint256), txdata: 0x621563ebfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp3(uint256)
PC address: 6519
Estimated Gas Usage: 5827 - 26252
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:65

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp3 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x421c0000000036006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x80, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp3(uint256), txdata: 0x621563eb000000000000000000000000000000000000000ffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp23(uint256)
PC address: 7111
Estimated Gas Usage: 5806 - 26231
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:99

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp23(uint256)
PC address: 7117
Estimated Gas Usage: 5806 - 26231
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:99

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp23 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0xaa050020a0a01020, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xf88, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp23(uint256), txdata: 0x7cd2ce0f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp35(uint256)
PC address: 7199
Estimated Gas Usage: 5828 - 26253
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:211

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp35(uint256), txdata: 0x88d5cb7cfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp35(uint256)
PC address: 7205
Estimated Gas Usage: 5828 - 26253
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:211

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp35 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x1011049000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xc03bc028c666d77, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp35(uint256), txdata: 0x88d5cb7c000003fffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp27(uint256)
PC address: 7302
Estimated Gas Usage: 5872 - 26297
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:258

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp27(uint256), txdata: 0x8d356d07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp27(uint256)
PC address: 7308
Estimated Gas Usage: 5872 - 26297
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:258

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp27 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x7400008000049, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x10001000903000800, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp27(uint256), txdata: 0x8d356d077ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp38(uint256)
PC address: 7628
Estimated Gas Usage: 5814 - 26239
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:156

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp38(uint256), txdata: 0x975b58d9fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp38(uint256)
PC address: 7634
Estimated Gas Usage: 5814 - 26239
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:156

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp38 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x4a361480020000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x20000000000000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x510680150efa575f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp38(uint256), txdata: 0x975b58d97ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp31(uint256)
PC address: 7715
Estimated Gas Usage: 5849 - 26274
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:284

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp31(uint256), txdata: 0x99d8cc4dfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp31(uint256)
PC address: 7721
Estimated Gas Usage: 5849 - 26274
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:284

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp31 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x411001215fffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp31(uint256), txdata: 0x99d8cc4d7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp19(uint256)
PC address: 7803
Estimated Gas Usage: 5871 - 26296
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:126

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp19(uint256), txdata: 0xa0c95111fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp19(uint256)
PC address: 7809
Estimated Gas Usage: 5871 - 26296
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:126

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp19 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1000110, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp19(uint256), txdata: 0xa0c951117ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp4()
PC address: 9207
Estimated Gas Usage: 1570 - 35851
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:77

require(now != pastBlockTime_tmstmp4)

--------------------
Initial State:

Account: [CREATOR], balance: 0x44000400000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x28000020104c0000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp4()
PC address: 9234
Estimated Gas Usage: 1570 - 35851
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:79

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x44000400000000001, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x28000020104c0000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: HYDROGEN
Function name: bug_tmstmp4()
PC address: 9305
Estimated Gas Usage: 1570 - 35851
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_28.sol:80

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1600d800000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4cc8f415fc20f440e, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x5402ee67a8b1f8fa1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp4(), txdata: 0xc78cc7d1, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp32()
PC address: 9362
Estimated Gas Usage: 1481 - 35762
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:147

require(now != pastBlockTime_tmstmp32)

--------------------
Initial State:

Account: [CREATOR], balance: 0x42069b80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40080220080000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000120000080, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp32()
PC address: 9389
Estimated Gas Usage: 1481 - 35762
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:149

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x42069b80, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x40080220080000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000120000080, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: HYDROGEN
Function name: bug_tmstmp32()
PC address: 9460
Estimated Gas Usage: 1481 - 35762
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_28.sol:150

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x401600401c201fda2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x4e801202d1c000256, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x49fe75bd2b9100011, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp32(), txdata: 0xd5214029, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp8()
PC address: 9517
Estimated Gas Usage: 1503 - 35784
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:174

require(now != pastBlockTime_tmstmp8)

--------------------
Initial State:

Account: [CREATOR], balance: 0x19808000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100e140050b008000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x54b58180a47013945, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: bug_tmstmp8()
PC address: 9544
Estimated Gas Usage: 1503 - 35784
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:176

if(now % 15 == 0) { // winner    //bug
            msg.sender.transfer(address(this).balance);
        }

--------------------
Initial State:

Account: [CREATOR], balance: 0x19808000000000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x100e140050b008000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x54b58180a47013945, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: HYDROGEN
Function name: bug_tmstmp8()
PC address: 9615
Estimated Gas Usage: 1503 - 35784
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_28.sol:177

msg.sender.transfer(address(this).balance)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4c9e02316efbf, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x2e806354948021e6d, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x5460be05372000c91, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_tmstmp8(), txdata: 0xd8495c6d, value: 0x8ac7230489e80000

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp39(uint256)
PC address: 9789
Estimated Gas Usage: 5848 - 26273
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:187

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp39(uint256), txdata: 0xec91c7e1fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp39(uint256)
PC address: 9795
Estimated Gas Usage: 5848 - 26273
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:187

if (startTime + (5 * 1 days) == _vtime){
		winner_tmstmp39 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x52485000044030002, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: play_tmstmp39(uint256), txdata: 0xec91c7e100000000000000000000000000000000000000007ffffffffffffffffff96880, value: 0x0

==== Integer Overflow ====
SWC ID: 101
Severity: High
Contract: HYDROGEN
Function name: play_tmstmp14(uint256)
PC address: 9872
Estimated Gas Usage: 5857 - 26282
The binary addition can overflow.
The operands of the addition operation are not sufficiently constrained. The addition could therefore result in an integer overflow. Prevent the overflow by checking inputs or ensure sure that the overflow is caught by an assertion.
--------------------
In file: buggy_28.sol:107

startTime + (5 * 1 days)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: play_tmstmp14(uint256), txdata: 0xecd97e16fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0000, value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: HYDROGEN
Function name: play_tmstmp14(uint256)
PC address: 9878
Estimated Gas Usage: 5857 - 26282
A control flow decision is made based on a predictable variable.
The block.timestamp environment variable is used in to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables for random number generation or to make critical control flow decisions.
--------------------
In file: buggy_28.sol:107

if (startTime + (5 * 1 days) == block.timestamp){
		winner_tmstmp14 = msg.sender;}

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: play_tmstmp14(uint256), txdata: 0xecd97e167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff96880, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HYDROGEN
Function name: decreaseAllowance(address,uint256)
PC address: 9958
Estimated Gas Usage: 979 - 1454
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_28.sol:35

assert(b <= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4004a2400000000, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x100a8ca2f000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: decreaseAllowance(address,uint256), txdata: 0xa457c2d780808080808080808080808000000000000000000000000000000000000100008080808080808080808080808001208080808020808080808080800000000001, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: HYDROGEN
Function name: findtwoPercent(uint256)
PC address: 9987
Estimated Gas Usage: 776 - 871
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_28.sol:41

assert(c >= a)

--------------------
Initial State:

Account: [CREATOR], balance: 0x42041000000040006, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x50380000000081140, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: findtwoPercent(uint256), txdata: 0x8ded4587ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa4, value: 0x0



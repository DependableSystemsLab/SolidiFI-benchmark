==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WhiteBetting
Function name: callme_re_ent35()
PC address: 5138
Estimated Gas Usage: 6908 - 61189
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_25.sol:81

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421000c0542000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x14bc74e2d030f61a9, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: callme_re_ent35(), txdata: 0x1578e01e, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WhiteBetting
Function name: callme_re_ent14()
PC address: 5243
Estimated Gas Usage: 6841 - 61122
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_25.sol:325

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421400c0142000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x163c7502401087fff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: callme_re_ent14(), txdata: 0x1abf48c0, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: WhiteBetting
Function name: withdraw_balances_re_ent36()
PC address: 6459
Estimated Gas Usage: 1496 - 35967
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: buggy_25.sol:74

msg.sender.send(balances_re_ent36[msg.sender ])

--------------------
Initial State:

Account: [CREATOR], balance: 0x301429200342c8281, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xa0a0f0cc00120c0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent36(), txdata: 0x54611e35, value: 0x0

==== Exception State ====
SWC ID: 110
Severity: Low
Contract: WhiteBetting
Function name: betList(uint64,uint256)
PC address: 6565
Estimated Gas Usage: 831 - 1116
A reachable exception has been detected.
It is possible to trigger an exception (opcode 0xfe). Exceptions can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. Note that explicit `assert()` should only be used to check invariants. Use `require()` for regular input checking.
--------------------
In file: buggy_25.sol:69

mapping(uint64 => BetFixture[]) public betList

--------------------
Initial State:

Account: [CREATOR], balance: 0x42011b13, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x4000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [SOMEGUY], function: betList(uint64,uint256), txdata: 0x553016cd00000000000000000000000000000000000000000000000000000401000000000000000000000000000000000000000000000000000000000000000000000000, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdrawBalance_re_ent40()
PC address: 8762
Estimated Gas Usage: 6662 - 61323
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: buggy_25.sol:91

msg.sender.call.value(userBalance_re_ent40[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x56bc75e2d630fffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdrawBalance_re_ent40()
PC address: 8897
Estimated Gas Usage: 6662 - 61323
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:95

userBalance_re_ent40[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1ffe, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent40(), txdata: 0x6cfd7721, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdrawBalance_re_ent26()
PC address: 9911
Estimated Gas Usage: 6685 - 61346
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: buggy_25.sol:145

msg.sender.call.value(userBalance_re_ent26[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x56bc75e2d630fffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdrawBalance_re_ent26()
PC address: 10046
Estimated Gas Usage: 6685 - 61346
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:149

userBalance_re_ent26[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x8, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1d4a, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent26(), txdata: 0x8f94454c, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WhiteBetting
Function name: bug_re_ent27()
PC address: 10131
Estimated Gas Usage: 6901 - 61842
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_25.sol:112

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x420010804400c0000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000000002002818, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_re_ent27(), txdata: 0x9128b348, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdraw_balances_re_ent8()
PC address: 10790
Estimated Gas Usage: 1584 - 36055
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: buggy_25.sol:350

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x56bc75e2d630fffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== Unchecked Call Return Value ====
SWC ID: 104
Severity: Low
Contract: WhiteBetting
Function name: withdraw_balances_re_ent8()
PC address: 10790
Estimated Gas Usage: 1657 - 36411
The return value of a message call is not checked.
External calls return a boolean value. If the callee contract halts with an exception, 'false' is returned and execution continues in the caller. It is usually recommended to wrap external calls into a require statement to prevent unexpected states.
--------------------
In file: buggy_25.sol:350

msg.sender.call.value(balances_re_ent8[msg.sender ])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x12a00e000801400e, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x10, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x20010000000000010, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdraw_balances_re_ent8()
PC address: 10921
Estimated Gas Usage: 1657 - 36411
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:352

balances_re_ent8[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x31200, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0xace, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdraw_balances_re_ent8(), txdata: 0xa2bcc8c5, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: bug_re_ent13()
PC address: 11007
Estimated Gas Usage: 7019 - 62243
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: buggy_25.sol:129

msg.sender.call.value(1 ether)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WhiteBetting
Function name: bug_re_ent13()
PC address: 11007
Estimated Gas Usage: 6946 - 61887
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_25.sol:129

msg.sender.call.value(1 ether)("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x4, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x420010804400c0000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16b460e28610fd6ee, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: bug_re_ent13()
PC address: 11086
Estimated Gas Usage: 6946 - 61887
Persistent state read after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:133

not_called_re_ent13 = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: bug_re_ent13()
PC address: 11100
Estimated Gas Usage: 6946 - 61887
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:133

not_called_re_ent13 = false

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x2000000000000000, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_re_ent13(), txdata: 0xa328c11f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: WhiteBetting
Function name: buyTicket_re_ent9()
PC address: 11498
Estimated Gas Usage: 12865 - 88089
Persistent state read after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:19

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: WhiteBetting
Function name: buyTicket_re_ent9()
PC address: 11551
Estimated Gas Usage: 12792 - 87733
Persistent state write after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:19

lastPlayer_re_ent9 = msg.sender

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Low
Contract: WhiteBetting
Function name: buyTicket_re_ent9()
PC address: 11581
Estimated Gas Usage: 12792 - 87733
Persistent state write after call
The contract account state is changed after an external call to a fixed address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:20

jackpot_re_ent9    = address(this).balance

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [CREATOR], function: buyTicket_re_ent9(), txdata: 0xacc0544f, value: 0x0

==== External Call To User-Supplied Address ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdrawBalance_re_ent33()
PC address: 11806
Estimated Gas Usage: 6617 - 61278
A call to a user-supplied address is executed.
The callee address of an external message call can be set by the caller. Note that the callee can contain arbitrary code and may re-enter any function in this contract. Review the business logic carefully to prevent averse effects on the contract state.
--------------------
In file: buggy_25.sol:102

msg.sender.call.value(userBalance_re_ent33[msg.sender])("")

--------------------
Initial State:

Account: [CREATOR], balance: 0x2, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x56bc75e2d630fffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== State change after external call ====
SWC ID: 107
Severity: Medium
Contract: WhiteBetting
Function name: withdrawBalance_re_ent33()
PC address: 11941
Estimated Gas Usage: 6617 - 61278
Persistent state write after call
The contract account state is changed after an external call to a user defined address. Consider that the called contract could re-enter the function before this state change takes place
--------------------
In file: buggy_25.sol:106

userBalance_re_ent33[msg.sender] = 0

--------------------
Initial State:

Account: [CREATOR], balance: 0x2000080, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x1ade, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: withdrawBalance_re_ent33(), txdata: 0xc6604ad7, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WhiteBetting
Function name: bug_re_ent20()
PC address: 13227
Estimated Gas Usage: 6944 - 61885
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_25.sol:159

msg.sender.send(1 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x420010c0540080000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16ac71e2d230fffff, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: bug_re_ent20(), txdata: 0xd8fa982f, value: 0x0

==== Unprotected Ether Withdrawal ====
SWC ID: 105
Severity: High
Contract: WhiteBetting
Function name: callme_re_ent7()
PC address: 13537
Estimated Gas Usage: 6927 - 61208
Anyone can withdraw ETH from the contract account.
Arbitrary senders other than the contract creator can withdraw ETH from the contract account without previously having sent an equivalent amount of ETH to it. This is likely to be a vulnerability.
--------------------
In file: buggy_25.sol:293

msg.sender.send(10 ether)

--------------------
Initial State:

Account: [CREATOR], balance: 0x1, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x421000c0542000000, nonce:0, storage:{}
Account: [SOMEGUY], balance: 0x16ac75e2d6004bc5f, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], data: [CONTRACT_CREATION], value: 0x0
Caller: [ATTACKER], function: callme_re_ent7(), txdata: 0xfef28f0b, value: 0x0


